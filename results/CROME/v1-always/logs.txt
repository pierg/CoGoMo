...updating repository ...
/home/cogomo
Checking out files:  26% (111/419)   Checking out files:  27% (114/419)   Checking out files:  28% (118/419)   Checking out files:  29% (122/419)   Checking out files:  30% (126/419)   Checking out files:  31% (130/419)   Checking out files:  32% (135/419)   Checking out files:  33% (139/419)   Checking out files:  34% (143/419)   Checking out files:  35% (147/419)   Checking out files:  36% (151/419)   Checking out files:  37% (156/419)   Checking out files:  38% (160/419)   Checking out files:  39% (164/419)   Checking out files:  40% (168/419)   Checking out files:  41% (172/419)   Checking out files:  42% (176/419)   Checking out files:  43% (181/419)   Checking out files:  44% (185/419)   Checking out files:  45% (189/419)   Checking out files:  46% (193/419)   Checking out files:  47% (197/419)   Checking out files:  48% (202/419)   Checking out files:  49% (206/419)   Checking out files:  50% (210/419)   Checking out files:  51% (214/419)   Checking out files:  52% (218/419)   Checking out files:  53% (223/419)   Checking out files:  54% (227/419)   Checking out files:  55% (231/419)   Checking out files:  56% (235/419)   Checking out files:  57% (239/419)   Checking out files:  58% (244/419)   Checking out files:  59% (248/419)   Checking out files:  60% (252/419)   Checking out files:  61% (256/419)   Checking out files:  62% (260/419)   Checking out files:  63% (264/419)   Checking out files:  64% (269/419)   Checking out files:  65% (273/419)   Checking out files:  66% (277/419)   Checking out files:  67% (281/419)   Checking out files:  68% (285/419)   Checking out files:  69% (290/419)   Checking out files:  70% (294/419)   Checking out files:  71% (298/419)   Checking out files:  72% (302/419)   Checking out files:  73% (306/419)   Checking out files:  74% (311/419)   Checking out files:  75% (315/419)   Checking out files:  76% (319/419)   Checking out files:  77% (323/419)   Checking out files:  78% (327/419)   Checking out files:  79% (332/419)   Checking out files:  80% (336/419)   Checking out files:  81% (340/419)   Checking out files:  82% (344/419)   Checking out files:  83% (348/419)   Checking out files:  84% (352/419)   Checking out files:  85% (357/419)   Checking out files:  86% (361/419)   Checking out files:  87% (365/419)   Checking out files:  88% (369/419)   Checking out files:  89% (373/419)   Checking out files:  90% (378/419)   Checking out files:  91% (382/419)   Checking out files:  92% (386/419)   Checking out files:  93% (390/419)   Checking out files:  94% (394/419)   Checking out files:  95% (399/419)   Checking out files:  96% (403/419)   Checking out files:  97% (407/419)   Checking out files:  98% (411/419)   Checking out files:  99% (415/419)   Checking out files: 100% (419/419)   Checking out files: 100% (419/419), done.
HEAD is now at e1c3fc7 small fix
remote: Enumerating objects: 702, done.[K
remote: Counting objects:   0% (1/702)[Kremote: Counting objects:   1% (8/702)[Kremote: Counting objects:   2% (15/702)[Kremote: Counting objects:   3% (22/702)[Kremote: Counting objects:   4% (29/702)[Kremote: Counting objects:   5% (36/702)[Kremote: Counting objects:   6% (43/702)[Kremote: Counting objects:   7% (50/702)[Kremote: Counting objects:   8% (57/702)[Kremote: Counting objects:   9% (64/702)[Kremote: Counting objects:  10% (71/702)[Kremote: Counting objects:  11% (78/702)[Kremote: Counting objects:  12% (85/702)[Kremote: Counting objects:  13% (92/702)[Kremote: Counting objects:  14% (99/702)[Kremote: Counting objects:  15% (106/702)remote: Counting objects:  16% (113/702)[Kremote: Counting objects:  17% (120/702)[Kremote: Counting objects:  18% (127/702)[Kremote: Counting objects:  19% (134/702)[Kremote: Counting objects:  20% (141/702)[Kremote: Counting objects:  21% (148/702)[Kremote: Counting objects:  22% (155/702)[Kremote: Counting objects:  23% (162/702)[Kremote: Counting objects:  24% (169/702)[Kremote: Counting objects:  25% (176/702)[Kremote: Counting objects:  26% (183/702)[Kremote: Counting objects:  27% (190/702)[Kremote: Counting objects:  28% (197/702)[Kremote: Counting objects:  29% (204/702)[Kremote: Counting objects:  30% (211/702)[Kremote: Counting objects:  31% (218/702)[Kremote: Counting objects:  32% (225/702)[Kremote: Counting objects:  33% (232/702)[Kremote: Counting objects:  34% (239/702)[Kremote: Counting objects:  35% (246/702)[Kremote: Counting objects:  36% (253/702)[Kremote: Counting objects:  37% (260/702)[Kremote: Counting objects:  38% (267/702)[Kremote: Counting objects:  39% (274/702)[Kremote: Counting objects:  40% (281/702)[Kremote: Counting objects:  41% (288/702)[Kremote: Counting objects:  42% (295/702)[Kremote: Counting objects:  43% (302/702)[Kremote: Counting objects:  44% (309/702)[Kremote: Counting objects:  45% (316/702)[Kremote: Counting objects:  46% (323/702)[Kremote: Counting objects:  47% (330/702)[Kremote: Counting objects:  48% (337/702)[Kremote: Counting objects:  49% (344/702)[Kremote: Counting objects:  50% (351/702)[Kremote: Counting objects:  51% (359/702)[Kremote: Counting objects:  52% (366/702)[Kremote: Counting objects:  53% (373/702)[Kremote: Counting objects:  54% (380/702)[Kremote: Counting objects:  55% (387/702)[Kremote: Counting objects:  56% (394/702)[Kremote: Counting objects:  57% (401/702)[Kremote: Counting objects:  58% (408/702)[Kremote: Counting objects:  59% (415/702)[Kremote: Counting objects:  60% (422/702)[Kremote: Counting objects:  61% (429/702)[Kremote: Counting objects:  62% (436/702)[Kremote: Counting objects:  63% (443/702)[Kremote: Counting objects:  64% (450/702)[Kremote: Counting objects:  65% (457/702)[Kremote: Counting objects:  66% (464/702)[Kremote: Counting objects:  67% (471/702)[Kremote: Counting objects:  68% (478/702)[Kremote: Counting objects:  69% (485/702)[Kremote: Counting objects:  70% (492/702)[Kremote: Counting objects:  71% (499/702)[Kremote: Counting objects:  72% (506/702)[Kremote: Counting objects:  73% (513/702)[Kremote: Counting objects:  74% (520/702)[Kremote: Counting objects:  75% (527/702)[Kremote: Counting objects:  76% (534/702)[Kremote: Counting objects:  77% (541/702)[Kremote: Counting objects:  78% (548/702)[Kremote: Counting objects:  79% (555/702)[Kremote: Counting objects:  80% (562/702)[Kremote: Counting objects:  81% (569/702)[Kremote: Counting objects:  82% (576/702)[Kremote: Counting objects:  83% (583/702)[Kremote: Counting objects:  84% (590/702)[Kremote: Counting objects:  85% (597/702)[Kremote: Counting objects:  86% (604/702)[Kremote: Counting objects:  87% (611/702)[Kremote: Counting objects:  88% (618/702)[Kremote: Counting objects:  89% (625/702)[Kremote: Counting objects:  90% (632/702)[Kremote: Counting objects:  91% (639/702)[Kremote: Counting objects:  92% (646/702)[Kremote: Counting objects:  93% (653/702)[Kremote: Counting objects:  94% (660/702)[Kremote: Counting objects:  95% (667/702)[Kremote: Counting objects:  96% (674/702)[Kremote: Counting objects:  97% (681/702)[Kremote: Counting objects:  98% (688/702)[Kremote: Counting objects:  99% (695/702)[Kremote: Counting objects: 100% (702/702)[Kremote: Counting objects: 100% (702/702), done.[K
remote: Compressing objects:   0% (1/307)[Kremote: Compressing objects:   1% (4/307)[Kremote: Compressing objects:   2% (7/307)[Kremote: Compressing objects:   3% (10/307)[Kremote: Compressing objects:   4% (13/307)[Kremote: Compressing objects:   5% (16/307)[Kremote: Compressing objects:   6% (19/307)[Kremote: Compressing objects:   7% (22/307)[Kremote: Compressing objects:   8% (25/307)[Kremote: Compressing objects:   9% (28/307)[Kremote: Compressing objects:  10% (31/307)[Kremote: Compressing objects:  11% (34/307)[Kremote: Compressing objects:  12% (37/307)[Kremote: Compressing objects:  13% (40/307)[Kremote: Compressing objects:  14% (43/307)[Kremote: Compressing objects:  15% (47/307)[Kremote: Compressing objects:  16% (50/307)[Kremote: Compressing objects:  17% (53/307)[Kremote: Compressing objects:  18% (56/307)[Kremote: Compressing objects:  19% (59/307)[Kremote: Compressing objects:  20% (62/307)[Kremote: Compressing objects:  21% (65/307)[Kremote: Compressing objects:  22% (68/307)[Kremote: Compressing objects:  23% (71/307)[Kremote: Compressing objects:  24% (74/307)[Kremote: Compressing objects:  25% (77/307)[Kremote: Compressing objects:  26% (80/307)[Kremote: Compressing objects:  27% (83/307)[Kremote: Compressing objects:  28% (86/307)[Kremote: Compressing objects:  29% (90/307)[Kremote: Compressing objects:  30% (93/307)[Kremote: Compressing objects:  31% (96/307)[Kremote: Compressing objects:  32% (99/307)[Kremote: Compressing objects:  33% (102/307)[Kremote: Compressing objects:  34% (105/307)[Kremote: Compressing objects:  35% (108/307)[Kremote: Compressing objects:  36% (111/307)[Kremote: Compressing objects:  37% (114/307)[Kremote: Compressing objects:  38% (117/307)[Kremote: Compressing objects:  39% (120/307)[Kremote: Compressing objects:  40% (123/307)[Kremote: Compressing objects:  41% (126/307)[Kremote: Compressing objects:  42% (129/307)[Kremote: Compressing objects:  43% (133/307)[Kremote: Compressing objects:  44% (136/307)[Kremote: Compressing objects:  45% (139/307)[Kremote: Compressing objects:  46% (142/307)[Kremote: Compressing objects:  47% (145/307)[Kremote: Compressing objects:  48% (148/307)[Kremote: Compressing objects:  49% (151/307)[Kremote: Compressing objects:  50% (154/307)[Kremote: Compressing objects:  51% (157/307)[Kremote: Compressing objects:  52% (160/307)[Kremote: Compressing objects:  53% (163/307)[Kremote: Compressing objects:  54% (166/307)[Kremote: Compressing objects:  55% (169/307)[Kremote: Compressing objects:  56% (172/307)[Kremote: Compressing objects:  57% (175/307)[Kremote: Compressing objects:  58% (179/307)[Kremote: Compressing objects:  59% (182/307)[Kremote: Compressing objects:  60% (185/307)[Kremote: Compressing objects:  61% (188/307)[Kremote: Compressing objects:  62% (191/307)[Kremote: Compressing objects:  63% (194/307)[Kremote: Compressing objects:  64% (197/307)[Kremote: Compressing objects:  65% (200/307)[Kremote: Compressing objects:  66% (203/307)[Kremote: Compressing objects:  67% (206/307)[Kremote: Compressing objects:  68% (209/307)[Kremote: Compressing objects:  69% (212/307)[Kremote: Compressing objects:  70% (215/307)[Kremote: Compressing objects:  71% (218/307)[Kremote: Compressing objects:  72% (222/307)[Kremote: Compressing objects:  73% (225/307)[Kremote: Compressing objects:  74% (228/307)[Kremote: Compressing objects:  75% (231/307)[Kremote: Compressing objects:  76% (234/307)[Kremote: Compressing objects:  77% (237/307)[Kremote: Compressing objects:  78% (240/307)[Kremote: Compressing objects:  79% (243/307)[Kremote: Compressing objects:  80% (246/307)[Kremote: Compressing objects:  81% (249/307)[Kremote: Compressing objects:  82% (252/307)[Kremote: Compressing objects:  83% (255/307)[Kremote: Compressing objects:  84% (258/307)[Kremote: Compressing objects:  85% (261/307)[Kremote: Compressing objects:  86% (265/307)[Kremote: Compressing objects:  87% (268/307)[Kremote: Compressing objects:  88% (271/307)[Kremote: Compressing objects:  89% (274/307)[Kremote: Compressing objects:  90% (277/307)[Kremote: Compressing objects:  91% (280/307)[Kremote: Compressing objects:  92% (283/307)[Kremote: Compressing objects:  93% (286/307)[Kremote: Compressing objects:  94% (289/307)[Kremote: Compressing objects:  95% (292/307)[Kremote: Compressing objects:  96% (295/307)[Kremote: Compressing objects:  97% (298/307)[Kremote: Compressing objects:  98% (301/307)[Kremote: Compressing objects:  99% (304/307)[Kremote: Compressing objects: 100% (307/307)[Kremote: Compressing objects: 100% (307/307), done.[K
Receiving objects:   0% (1/3929)   Receiving objects:   1% (40/3929)   Receiving objects:   2% (79/3929)   Receiving objects:   3% (118/3929)   Receiving objects:   4% (158/3929)   Receiving objects:   5% (197/3929)   Receiving objects:   6% (236/3929)   Receiving objects:   7% (276/3929)   Receiving objects:   8% (315/3929)   Receiving objects:   9% (354/3929)   Receiving objects:  10% (393/3929)   Receiving objects:  11% (433/3929)   Receiving objects:  12% (472/3929)   Receiving objects:  13% (511/3929)   Receiving objects:  14% (551/3929)   Receiving objects:  15% (590/3929)   Receiving objects:  16% (629/3929)   Receiving objects:  17% (668/3929)   Receiving objects:  18% (708/3929)   Receiving objects:  19% (747/3929)   Receiving objects:  20% (786/3929)   Receiving objects:  21% (826/3929)   Receiving objects:  22% (865/3929)   Receiving objects:  23% (904/3929)   Receiving objects:  24% (943/3929)   Receiving objects:  25% (983/3929)   Receiving objects:  26% (1022/3929)   Receiving objects:  27% (1061/3929)   Receiving objects:  28% (1101/3929)   Receiving objects:  29% (1140/3929)   Receiving objects:  30% (1179/3929)   Receiving objects:  31% (1218/3929)   Receiving objects:  32% (1258/3929)   Receiving objects:  33% (1297/3929)   Receiving objects:  34% (1336/3929)   Receiving objects:  35% (1376/3929)   Receiving objects:  36% (1415/3929)   Receiving objects:  37% (1454/3929)   Receiving objects:  38% (1494/3929)   Receiving objects:  39% (1533/3929)   Receiving objects:  40% (1572/3929)   Receiving objects:  41% (1611/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  42% (1651/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  43% (1690/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  44% (1729/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  45% (1769/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  46% (1808/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  47% (1847/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  48% (1886/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  49% (1926/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  50% (1965/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  51% (2004/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  52% (2044/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  53% (2083/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  54% (2122/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  55% (2161/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  56% (2201/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  57% (2240/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  58% (2279/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  59% (2319/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  60% (2358/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  61% (2397/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  62% (2436/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  63% (2476/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  64% (2515/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  65% (2554/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  66% (2594/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  67% (2633/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  68% (2672/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  69% (2712/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  70% (2751/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  71% (2790/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  72% (2829/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  73% (2869/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  74% (2908/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  75% (2947/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  76% (2987/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  77% (3026/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  78% (3065/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  79% (3104/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  80% (3144/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  81% (3183/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  82% (3222/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  83% (3262/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  84% (3301/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  85% (3340/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  86% (3379/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  87% (3419/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  88% (3458/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  89% (3497/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  90% (3537/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  91% (3576/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  92% (3615/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  93% (3654/3929), 620.01 KiB | 1.17 MiB/s   remote: Total 3929 (delta 470), reused 589 (delta 360), pack-reused 3227[K
Receiving objects:  94% (3694/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  95% (3733/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  96% (3772/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  97% (3812/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  98% (3851/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects:  99% (3890/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects: 100% (3929/3929), 620.01 KiB | 1.17 MiB/s   Receiving objects: 100% (3929/3929), 1.14 MiB | 1.32 MiB/s, done.
Resolving deltas:   0% (0/2794)   Resolving deltas:   3% (90/2794)   Resolving deltas:   5% (163/2794)   Resolving deltas:   6% (170/2794)   Resolving deltas:   7% (200/2794)   Resolving deltas:   9% (270/2794)   Resolving deltas:  12% (338/2794)   Resolving deltas:  13% (381/2794)   Resolving deltas:  14% (402/2794)   Resolving deltas:  15% (433/2794)   Resolving deltas:  16% (448/2794)   Resolving deltas:  17% (497/2794)   Resolving deltas:  19% (541/2794)   Resolving deltas:  20% (565/2794)   Resolving deltas:  22% (635/2794)   Resolving deltas:  23% (645/2794)   Resolving deltas:  24% (676/2794)   Resolving deltas:  25% (706/2794)   Resolving deltas:  26% (731/2794)   Resolving deltas:  28% (791/2794)   Resolving deltas:  30% (848/2794)   Resolving deltas:  34% (959/2794)   Resolving deltas:  39% (1104/2794)   Resolving deltas:  40% (1136/2794)   Resolving deltas:  41% (1158/2794)   Resolving deltas:  54% (1523/2794)   Resolving deltas:  74% (2090/2794)   Resolving deltas:  77% (2158/2794)   Resolving deltas:  78% (2188/2794)   Resolving deltas:  79% (2217/2794)   Resolving deltas:  80% (2237/2794)   Resolving deltas:  82% (2294/2794)   Resolving deltas:  84% (2366/2794)   Resolving deltas:  86% (2406/2794)   Resolving deltas:  87% (2446/2794)   Resolving deltas:  88% (2461/2794)   Resolving deltas:  89% (2509/2794)   Resolving deltas:  90% (2527/2794)   Resolving deltas:  91% (2550/2794)   Resolving deltas:  92% (2573/2794)   Resolving deltas:  93% (2601/2794)   Resolving deltas:  94% (2628/2794)   Resolving deltas:  95% (2659/2794)   Resolving deltas:  97% (2721/2794)   Resolving deltas:  98% (2755/2794)   Resolving deltas:  99% (2779/2794)   Resolving deltas: 100% (2794/2794)   Resolving deltas: 100% (2794/2794), completed with 46 local objects.
From https://github.com/pierg/cogomo
   e1c3fc7..57595e2  master     -> origin/master
Updating e1c3fc7..57595e2
Fast-forward
 Dockerfile                                         |    2 [32m+[m[31m-[m
 bin/ubuntu_19.10/owl.jar                           |  Bin [31m0[m -> [32m4251364[m bytes
 bin/ubuntu_19.10/strix                             |  Bin [31m0[m -> [32m17103616[m bytes
 clustering_input.py                                |  133 [31m--[m
 clustering_run.py                                  |   63 [31m-[m
 entrypoint.sh                                      |    4 [32m+[m[31m-[m
 main_tests.py                                      |  257 [31m---[m
 mission_specification.py                           |  187 [32m++[m
 .../input_text_files}/mission_example.txt          |    0
 .../input_text_files}/mission_example_contexts.txt |    0
 .../input_text_files}/pattern_example.json         |    0
 .../input_text_files}/robots_components_simple.txt |    0
 .../input_text_files}/robots_patterns_simple.txt   |    0
 nusmvfile.smv                                      |   12 [32m+[m[31m-[m
 output/clustering/context-based-cgt.txt            |  132 [31m--[m
 results/CROME/run.sh                               |   55 [32m+[m
 results/CROME/sefm-always/logs.txt                 | 1812 [32m++++++++++++++++++++[m
 results/CROME/sefm-always/mission_specification.py |  187 [32m++[m
 .../sefm-always/results/CGT_no_clusters/CGT.txt    |   44 [32m+[m
 .../results/CGT_no_clusters/specification.txt      |   28 [32m+[m
 .../sefm-always/results/CGT_with_clusters/CGT.txt  |   86 [32m+[m
 .../CGT_with_clusters/cluster_0/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_0/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_1/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_2/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_2/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_3/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_3/specification.txt  |   28 [32m+[m
 results/CROME/sefm-always/results/SUMMARY.txt      |   74 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 results/CROME/sefm-recurrence/logs.txt             | 1435 [32m++++++++++++++++[m
 .../CROME/sefm-recurrence/mission_specification.py |  187 [32m++[m
 .../results/CGT_no_clusters/CGT.txt                |   44 [32m+[m
 .../results/CGT_no_clusters/controller.dot         |    1 [32m+[m
 .../results/CGT_no_clusters/specification.txt      |   28 [32m+[m
 .../results/CGT_with_clusters/CGT.txt              |   86 [32m+[m
 .../CGT_with_clusters/cluster_0/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_0/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_1/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_1/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_2/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_2/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_3/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_3/specification.txt  |   28 [32m+[m
 results/CROME/sefm-recurrence/results/SUMMARY.txt  |   70 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 .../c1-nostrict/mission_specification.py           |  169 [32m++[m
 results/clustering/c1/mission_specification.py     |  196 [32m+++[m
 results/clustering/c2/mission_specification.py     |  170 [32m++[m
 results/clustering/c3/mission_specification.py     |  170 [32m++[m
 results/clustering/c4/mission_specification.py     |  171 [32m++[m
 results/clustering/comb.sh                         |   46 [32m+[m
 .../n1-fixed-prompt/mission_specification.py       |  170 [32m++[m
 results/clustering/n1/mission_specification.py     |  170 [32m++[m
 results/clustering/n10-1/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-2/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-3/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-4/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-5/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-6/mission_specification.py  |  187 [32m++[m
 results/clustering/n10-7/mission_specification.py  |  188 [32m++[m
 .../clustering/n10-8-1/mission_specification.py    |  189 [32m++[m
 .../clustering/n10-8-2/mission_specification.py    |  191 [32m+++[m
 .../clustering/n10-8-3/mission_specification.py    |  192 [32m+++[m
 results/clustering/n10-8/mission_specification.py  |  189 [32m++[m
 results/clustering/n10/mission_specification.py    |  185 [32m++[m
 results/clustering/n11-1/mission_specification.py  |  188 [32m++[m
 results/clustering/n11-2/mission_specification.py  |  188 [32m++[m
 results/clustering/n11-3/mission_specification.py  |  186 [32m++[m
 .../clustering/n11-4-good/mission_specification.py |  187 [32m++[m
 .../n11-4-patrol/mission_specification.py          |  187 [32m++[m
 .../n11-4-visit/mission_specification.py           |  187 [32m++[m
 results/clustering/n11-5/mission_specification.py  |  187 [32m++[m
 results/clustering/n11-6/mission_specification.py  |  186 [32m++[m
 results/clustering/n11/mission_specification.py    |  191 [32m+++[m
 results/clustering/n12/mission_specification.py    |  186 [32m++[m
 results/clustering/n13-1/mission_specification.py  |  186 [32m++[m
 results/clustering/n13-2/mission_specification.py  |  190 [32m++[m
 results/clustering/n13-4/mission_specification.py  |  187 [32m++[m
 .../clustering/n13-good/mission_specification.py   |  187 [32m++[m
 .../clustering/n2-nofire/mission_specification.py  |  180 [32m++[m
 results/clustering/n2/mission_specification.py     |  180 [32m++[m
 results/clustering/n3/mission_specification.py     |  193 [32m+++[m
 results/clustering/n4/mission_specification.py     |  195 [32m+++[m
 results/clustering/n5/mission_specification.py     |  195 [32m+++[m
 results/clustering/n6/mission_specification.py     |  195 [32m+++[m
 results/clustering/n7/mission_specification.py     |  195 [32m+++[m
 results/clustering/n8-2/mission_specification.py   |  188 [32m++[m
 results/clustering/n8-3/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-4/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-5/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-6/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-7/mission_specification.py   |  204 [32m+++[m
 results/clustering/n8-8/mission_specification.py   |  204 [32m+++[m
 results/clustering/n8/mission_specification.py     |  187 [32m++[m
 results/clustering/n9/mission_specification.py     |  202 [32m+++[m
 results/clustering/pull.sh                         |    5 [32m+[m
 results/clustering/push.sh                         |    7 [32m+[m
 results/clustering/run.sh                          |   55 [32m+[m
 results/clustering/sefm-always/logs.txt            | 1812 [32m++++++++++++++++++++[m
 .../sefm-always/mission_specification.py           |  187 [32m++[m
 .../sefm-always/results/CGT_no_clusters/CGT.txt    |   44 [32m+[m
 .../results/CGT_no_clusters/specification.txt      |   28 [32m+[m
 .../sefm-always/results/CGT_with_clusters/CGT.txt  |   86 [32m+[m
 .../CGT_with_clusters/cluster_0/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_0/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_1/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_2/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_2/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_3/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_3/specification.txt  |   28 [32m+[m
 results/clustering/sefm-always/results/SUMMARY.txt |   74 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 .../sefm-betty-fixed/mission_specification.py      |  187 [32m++[m
 .../clustering/sefm-betty/mission_specification.py |  187 [32m++[m
 results/clustering/sefm-recurrence/logs.txt        | 1435 [32m++++++++++++++++[m
 .../sefm-recurrence/mission_specification.py       |  187 [32m++[m
 .../results/CGT_no_clusters/CGT.txt                |   44 [32m+[m
 .../results/CGT_no_clusters/controller.dot         |    1 [32m+[m
 .../results/CGT_no_clusters/specification.txt      |   28 [32m+[m
 .../results/CGT_with_clusters/CGT.txt              |   86 [32m+[m
 .../CGT_with_clusters/cluster_0/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_0/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_1/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_1/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_2/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_2/specification.txt  |   28 [32m+[m
 .../CGT_with_clusters/cluster_3/controller.dot     |    1 [32m+[m
 .../CGT_with_clusters/cluster_3/specification.txt  |   28 [32m+[m
 .../clustering/sefm-recurrence/results/SUMMARY.txt |   70 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 .../test-conflict/mission_specification.py         |  117 [32m++[m
 .../test-scopes-liveness/mission_specification.py  |  155 [32m++[m
 .../test-scopes/mission_specification.py           |  155 [32m++[m
 results/test/run.sh                                |   55 [32m+[m
 results/test/sefm-always/mission_specification.py  |  187 [32m++[m
 .../test/sefm-recurrence/mission_specification.py  |  187 [32m++[m
 run.sh                                             |   30 [32m+[m[31m-[m
 run_clustering.py                                  |  353 [32m++++[m
 run_clustering_combinations.py                     |   78 [32m+[m
 mapping_run.py => run_mapping.py                   |    4 [32m+[m[31m-[m
 src/checks/nusmv.py                                |    4 [32m+[m
 src/checks/tools.py                                |    2 [32m+[m
 src/contracts/contract.py                          |   26 [32m+[m[31m-[m
 src/contracts/operations.py                        |    6 [32m+[m[31m-[m
 src/controller/synthesis.py                        |   68 [32m+[m[31m-[m
 src/goals/cgtgoal.py                               |   81 [32m+[m[31m-[m
 src/goals/helpers.py                               |  191 [32m++[m[31m-[m
 src/goals/operations.py                            |  267 [32m++[m[31m-[m
 src/helper/buchi.py                                |  185 [32m+[m[31m-[m
 src/helper/tools.py                                |    2 [32m+[m[31m-[m
 src/typescogomo/formula.py                         |  110 [32m+[m[31m-[m
 src/typescogomo/formulae.py                        |   92 [32m+[m[31m-[m
 src/typescogomo/guarantee.py                       |    6 [32m+[m[31m-[m
 src/typescogomo/patterns.py                        |  222 [32m++[m[31m-[m
 src/typescogomo/scopes.py                          |  119 [32m+[m[31m-[m
 src/z3/tests/test_component_selection.py           |    4 [32m+[m[31m-[m
 src/z3/tests/test_greedy_selection.py              |    4 [32m+[m[31m-[m
 tests/components/test_component_selection.py       |    6 [32m+[m[31m-[m
 tests/components/test_port.py                      |    2 [32m+[m[31m-[m
 tests/goals/test_consolidation.py                  |    4 [32m+[m[31m-[m
 tests/goals/test_mapping.py                        |   12 [32m+[m[31m-[m
 web/static/assets/js/ltl/app.js                    |    2 [32m+[m[31m-[m
 web/static/assets/js/z3/app.js                     |    2 [32m+[m[31m-[m
 206 files changed, 21784 insertions(+), 976 deletions(-)
 create mode 100644 bin/ubuntu_19.10/owl.jar
 create mode 100755 bin/ubuntu_19.10/strix
 delete mode 100644 clustering_input.py
 delete mode 100644 clustering_run.py
 delete mode 100644 main_tests.py
 create mode 100644 mission_specification.py
 rename {input_files => missions/input_text_files}/mission_example.txt (100%)
 rename {input_files => missions/input_text_files}/mission_example_contexts.txt (100%)
 rename {input_files => missions/input_text_files}/pattern_example.json (100%)
 rename {input_files => missions/input_text_files}/robots_components_simple.txt (100%)
 rename {input_files => missions/input_text_files}/robots_patterns_simple.txt (100%)
 delete mode 100644 output/clustering/context-based-cgt.txt
 create mode 100755 results/CROME/run.sh
 create mode 100644 results/CROME/sefm-always/logs.txt
 create mode 100644 results/CROME/sefm-always/mission_specification.py
 create mode 100644 results/CROME/sefm-always/results/CGT_no_clusters/CGT.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_no_clusters/specification.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/CGT.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_0/controller.dot
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_0/specification.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_1/specification.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_2/controller.dot
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_2/specification.txt
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_3/controller.dot
 create mode 100644 results/CROME/sefm-always/results/CGT_with_clusters/cluster_3/specification.txt
 create mode 100644 results/CROME/sefm-always/results/SUMMARY.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/sefm-always/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/sefm-always/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/sefm-always/results/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/sefm-always/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/sefm-always/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/sefm-always/results/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/logs.txt
 create mode 100644 results/CROME/sefm-recurrence/mission_specification.py
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_no_clusters/CGT.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_no_clusters/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_no_clusters/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/CGT.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_0/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_0/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_1/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_1/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_2/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_2/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_3/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/CGT_with_clusters/cluster_3/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/SUMMARY.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/shop-alarm/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/sefm-recurrence/results/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/clustering/c1-nostrict/mission_specification.py
 create mode 100644 results/clustering/c1/mission_specification.py
 create mode 100644 results/clustering/c2/mission_specification.py
 create mode 100644 results/clustering/c3/mission_specification.py
 create mode 100644 results/clustering/c4/mission_specification.py
 create mode 100755 results/clustering/comb.sh
 create mode 100644 results/clustering/n1-fixed-prompt/mission_specification.py
 create mode 100644 results/clustering/n1/mission_specification.py
 create mode 100644 results/clustering/n10-1/mission_specification.py
 create mode 100644 results/clustering/n10-2/mission_specification.py
 create mode 100644 results/clustering/n10-3/mission_specification.py
 create mode 100644 results/clustering/n10-4/mission_specification.py
 create mode 100644 results/clustering/n10-5/mission_specification.py
 create mode 100644 results/clustering/n10-6/mission_specification.py
 create mode 100644 results/clustering/n10-7/mission_specification.py
 create mode 100644 results/clustering/n10-8-1/mission_specification.py
 create mode 100644 results/clustering/n10-8-2/mission_specification.py
 create mode 100644 results/clustering/n10-8-3/mission_specification.py
 create mode 100644 results/clustering/n10-8/mission_specification.py
 create mode 100644 results/clustering/n10/mission_specification.py
 create mode 100644 results/clustering/n11-1/mission_specification.py
 create mode 100644 results/clustering/n11-2/mission_specification.py
 create mode 100644 results/clustering/n11-3/mission_specification.py
 create mode 100644 results/clustering/n11-4-good/mission_specification.py
 create mode 100644 results/clustering/n11-4-patrol/mission_specification.py
 create mode 100644 results/clustering/n11-4-visit/mission_specification.py
 create mode 100644 results/clustering/n11-5/mission_specification.py
 create mode 100644 results/clustering/n11-6/mission_specification.py
 create mode 100644 results/clustering/n11/mission_specification.py
 create mode 100644 results/clustering/n12/mission_specification.py
 create mode 100644 results/clustering/n13-1/mission_specification.py
 create mode 100644 results/clustering/n13-2/mission_specification.py
 create mode 100644 results/clustering/n13-4/mission_specification.py
 create mode 100644 results/clustering/n13-good/mission_specification.py
 create mode 100644 results/clustering/n2-nofire/mission_specification.py
 create mode 100644 results/clustering/n2/mission_specification.py
 create mode 100644 results/clustering/n3/mission_specification.py
 create mode 100644 results/clustering/n4/mission_specification.py
 create mode 100644 results/clustering/n5/mission_specification.py
 create mode 100644 results/clustering/n6/mission_specification.py
 create mode 100644 results/clustering/n7/mission_specification.py
 create mode 100644 results/clustering/n8-2/mission_specification.py
 create mode 100644 results/clustering/n8-3/mission_specification.py
 create mode 100644 results/clustering/n8-4/mission_specification.py
 create mode 100644 results/clustering/n8-5/mission_specification.py
 create mode 100644 results/clustering/n8-6/mission_specification.py
 create mode 100644 results/clustering/n8-7/mission_specification.py
 create mode 100644 results/clustering/n8-8/mission_specification.py
 create mode 100644 results/clustering/n8/mission_specification.py
 create mode 100644 results/clustering/n9/mission_specification.py
 create mode 100755 results/clustering/pull.sh
 create mode 100755 results/clustering/push.sh
 create mode 100755 results/clustering/run.sh
 create mode 100644 results/clustering/sefm-always/logs.txt
 create mode 100644 results/clustering/sefm-always/mission_specification.py
 create mode 100644 results/clustering/sefm-always/results/CGT_no_clusters/CGT.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_no_clusters/specification.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/CGT.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_0/controller.dot
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_0/specification.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_1/specification.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_2/controller.dot
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_2/specification.txt
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_3/controller.dot
 create mode 100644 results/clustering/sefm-always/results/CGT_with_clusters/cluster_3/specification.txt
 create mode 100644 results/clustering/sefm-always/results/SUMMARY.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/clustering/sefm-always/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/clustering/sefm-always/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/low-battery/controller.dot
 create mode 100644 results/clustering/sefm-always/results/goal_list/low-battery/specification.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/clustering/sefm-always/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/clustering/sefm-always/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/clustering/sefm-always/results/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/clustering/sefm-betty-fixed/mission_specification.py
 create mode 100644 results/clustering/sefm-betty/mission_specification.py
 create mode 100644 results/clustering/sefm-recurrence/logs.txt
 create mode 100644 results/clustering/sefm-recurrence/mission_specification.py
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_no_clusters/CGT.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_no_clusters/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_no_clusters/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/CGT.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_0/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_0/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_1/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_1/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_2/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_2/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_3/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/CGT_with_clusters/cluster_3/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/SUMMARY.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/low-battery/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/low-battery/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/shop-alarm/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/clustering/sefm-recurrence/results/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/clustering/test-conflict/mission_specification.py
 create mode 100644 results/clustering/test-scopes-liveness/mission_specification.py
 create mode 100644 results/clustering/test-scopes/mission_specification.py
 create mode 100755 results/test/run.sh
 create mode 100644 results/test/sefm-always/mission_specification.py
 create mode 100644 results/test/sefm-recurrence/mission_specification.py
 create mode 100644 run_clustering.py
 create mode 100644 run_clustering_combinations.py
 rename mapping_run.py => run_mapping.py (97%)
...evaluation launch_script...
Launching clustering...
Copying custom input file if exists...
Launching clustering...
CUSTOM SPEC c2:
/home/cogomo
			SAT:	night_time
			SAT:	day_time
			SAT:	low_battery
			SAT:	full_battery
			SAT:	entrance
			SAT:	shop
			SAT:	get_med
			SAT:	warehouse
			SAT:	human_entered
			SAT:	guard_entered
			SAT:	door_alarm
			SAT:	fire_alarm
			SAT:	go_entrace
			SAT:	go_counter
			SAT:	go_back
			SAT:	go_warehouse
			SAT:	go_charging_point
			SAT:	go_safe_loc
			SAT:	contact_station
			SAT:	welcome_client
			SAT:	take_med
			SAT:	give_med
			SAT:	!(fire_alarm)
			SAT:	night_time
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


			SAT:	(shop & day_time)
			SAT:	(shop & day_time)
			SAT:	(F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace)))))
			SAT:	G((go_warehouse) -> (take_med))
			SAT:	G((go_entrace) -> (give_med))
			SAT:	((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


			SAT:	(day_time & entrance)
			SAT:	(day_time & entrance)
			SAT:	G((human_entered) -> F(welcome_client))
			SAT:	G((human_entered) -> F(welcome_client))
			SAT:	G((human_entered) -> F(welcome_client))
GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


			SAT:	night_time
			SAT:	(G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))
			SAT:	(G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))
			SAT:	(G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))
GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))


			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G((fire_alarm) -> (go_safe_loc))
GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))


GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, go_warehouse, go_entrace, go_back"


/home/cogomo/output/results/goal_list/night-time-patroling/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/goal_list/night-time-patroling/controller.eps  ->   mealy machine generated
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, give_med, take_med, go_warehouse, go_entrace, go_back"


/home/cogomo/output/results/goal_list/get-meds-to-clients/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/goal_list/get-meds-to-clients/controller.eps  ->   mealy machine generated
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="full_battery, human_entered, low_battery, shop, get_med, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_warehouse, go_entrace, go_back, go_charging_point"


/home/cogomo/output/results/goal_list/low-battery/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/goal_list/low-battery/controller.eps  ->   mealy machine generated
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, entrance, night_time, guard_entered, day_time" --outs="go_safe_loc, go_counter, welcome_client, go_warehouse, go_entrace, go_back, go_charging_point"


/home/cogomo/output/results/goal_list/welcome-visitors/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/goal_list/welcome-visitors/controller.eps  ->   mealy machine generated
			SAT:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, go_warehouse, go_entrace, go_back"


UNREALIZABLE
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_warehouse, go_back, go_entrace, go_charging_point"


/home/cogomo/output/results/goal_list/fire-alarm/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/goal_list/fire-alarm/controller.eps  ->   mealy machine generated
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
			SAT:	(G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))))
The conjunction satisfiable.
GOAL:	'fire-alarm^^get-meds-to-clients^^low-battery^^night-time-patroling^^shop-alarm^^welcome-visitors'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
	/\ 
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
	/\ 
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
	/\ 
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
	/\ 
  A:	TRUE
  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
	/\ 
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	CONJUNCTION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, door_alarm, guard_entered, fire_alarm" --outs="go_entrace, go_counter, go_back, go_warehouse, take_med, give_med, go_charging_point, welcome_client, go_safe_loc"


UNREALIZABLE
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)




6 GOALS
CONTEXTS:['night_time', '(shop & day_time)', 'TRUE', '(day_time & entrance)']





__ALL_COMBINATIONS_(15)___________________________________________________________
night_time			!((shop & day_time))			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			!(night_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			!(night_time)			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(day_time & entrance)			!(night_time)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(day_time & entrance)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			!(night_time)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			(day_time & entrance)			!(night_time)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			(day_time & entrance)			!(night_time)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			(day_time & entrance)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			(day_time & entrance)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			(day_time & entrance)			!(night_time)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			(day_time & entrance)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)


MERGING 15 CONTEXTS...
			SAT:	(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


__MERGED_____________________________________________________________________
(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


MAPPING 6 GOALS TO 4 CONTEXTS
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((day_time & entrance)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (day_time & entrance)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
*** ALL GOAL HAVE BEEN MAPPED TO A CONTEXT ***
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE ]
  guarantees_satur :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	COMPOSITION
		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ go_entrace, go_counter, go_back, go_warehouse, night_time, low_battery, full_battery, go_charging_point, door_alarm, guard_entered, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, human_entered, welcome_client, entrance, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


The conjunction satisfiable.
GOAL:	'fire-alarm||get-meds-to-clients||low-battery^^fire-alarm||get-meds-to-clients||low-battery||welcome-visitors^^fire-alarm||low-battery^^fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))
	/\ 
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	CONJUNCTION
		GOAL:	'fire-alarm||low-battery'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))

			COMPOSITION
				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
		  A:	TRUE
		  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'night-time-patroling'
				  A:	TRUE
				  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'shop-alarm'
				  A:	TRUE
				  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
		  A:	TRUE
		  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
		  A:	TRUE
		  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'welcome-visitors'
				  A:	TRUE
				  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))




Synthetize the controller for the branches of the CGT composing it with the new context
TRUE
TRUE
/home/cogomo/output/results/cgt_clusters_original/cluster_0/context.eps  ->   buchi generated
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="fire_alarm" --outs="go_safe_loc, go_entrace, go_counter, go_back, go_warehouse, go_charging_point"


/home/cogomo/output/results/cgt_clusters_original/cluster_0/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/cgt_clusters_original/cluster_0/controller.eps  ->   mealy machine generated
TRUE
TRUE
/home/cogomo/output/results/cgt_clusters_original/cluster_1/context.eps  ->   buchi generated
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, low_battery, full_battery, door_alarm, guard_entered, fire_alarm" --outs="go_entrace, go_counter, go_back, go_warehouse, go_charging_point, go_safe_loc"


UNREALIZABLE
TRUE
TRUE
/home/cogomo/output/results/cgt_clusters_original/cluster_2/context.eps  ->   buchi generated
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> ((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, fire_alarm" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, go_safe_loc, go_counter"


/home/cogomo/output/results/cgt_clusters_original/cluster_2/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/cgt_clusters_original/cluster_2/controller.eps  ->   mealy machine generated
TRUE
TRUE
/home/cogomo/output/results/cgt_clusters_original/cluster_3/context.eps  ->   buchi generated
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, fire_alarm" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, welcome_client, go_safe_loc, go_counter"


/home/cogomo/output/results/cgt_clusters_original/cluster_3/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/cgt_clusters_original/cluster_3/controller.eps  ->   mealy machine generated

Clustering process finished. Results generated.
GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))


GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, go_warehouse, go_entrace, go_back"


/home/cogomo/output/results/complete/goal_list/night-time-patroling/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/goal_list/night-time-patroling/controller.eps  ->   mealy machine generated
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, give_med, take_med, go_warehouse, go_entrace, go_back"


/home/cogomo/output/results/complete/goal_list/get-meds-to-clients/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/goal_list/get-meds-to-clients/controller.eps  ->   mealy machine generated
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="full_battery, human_entered, low_battery, shop, get_med, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_warehouse, go_entrace, go_back, go_charging_point"


/home/cogomo/output/results/complete/goal_list/low-battery/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/goal_list/low-battery/controller.eps  ->   mealy machine generated
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, entrance, night_time, guard_entered, day_time" --outs="go_safe_loc, go_counter, welcome_client, go_warehouse, go_entrace, go_back, go_charging_point"


/home/cogomo/output/results/complete/goal_list/welcome-visitors/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/goal_list/welcome-visitors/controller.eps  ->   mealy machine generated
			SAT:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_charging_point, go_warehouse, go_entrace, go_back"


UNREALIZABLE
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="human_entered, get_med, shop, warehouse, door_alarm, fire_alarm, night_time, entrance, guard_entered, day_time" --outs="go_safe_loc, go_counter, go_warehouse, go_back, go_entrace, go_charging_point"


/home/cogomo/output/results/complete/goal_list/fire-alarm/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/goal_list/fire-alarm/controller.eps  ->   mealy machine generated
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
			SAT:	(G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))))
The conjunction satisfiable.
GOAL:	'fire-alarm^^get-meds-to-clients^^low-battery^^night-time-patroling^^shop-alarm^^welcome-visitors'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
	/\ 
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
	/\ 
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
	/\ 
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
	/\ 
  A:	TRUE
  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))
	/\ 
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	CONJUNCTION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, door_alarm, guard_entered, fire_alarm, warehouse" --outs="go_entrace, go_counter, go_back, go_warehouse, take_med, give_med, go_charging_point, welcome_client, go_safe_loc"


UNREALIZABLE
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)




6 GOALS
CONTEXTS:['night_time', '(shop & day_time)', 'TRUE', '(day_time & entrance)']





__ALL_COMBINATIONS_(15)___________________________________________________________
night_time			!((shop & day_time))			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			!(night_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			!(night_time)			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(day_time & entrance)			!(night_time)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(day_time & entrance)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			!(night_time)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			(day_time & entrance)			!(night_time)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			(day_time & entrance)			!(night_time)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			(day_time & entrance)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			(day_time & entrance)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			(day_time & entrance)			!(night_time)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			(day_time & entrance)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)


MERGING 15 CONTEXTS...
			SAT:	(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


__MERGED_____________________________________________________________________
(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


MAPPING 6 GOALS TO 4 CONTEXTS
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((day_time & entrance)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (day_time & entrance)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
*** ALL GOAL HAVE BEEN MAPPED TO A CONTEXT ***
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE ]
  guarantees_satur :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	COMPOSITION
		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))
			VALID:	((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace)))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ go_entrace, go_counter, go_back, go_warehouse, night_time, low_battery, full_battery, go_charging_point, door_alarm, guard_entered, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, human_entered, welcome_client, entrance, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


The conjunction satisfiable.
GOAL:	'fire-alarm||get-meds-to-clients||low-battery^^fire-alarm||get-meds-to-clients||low-battery||welcome-visitors^^fire-alarm||low-battery^^fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))
	/\ 
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	CONJUNCTION
		GOAL:	'fire-alarm||low-battery'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))

			COMPOSITION
				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
		  A:	TRUE
		  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'night-time-patroling'
				  A:	TRUE
				  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'shop-alarm'
				  A:	TRUE
				  G:	G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
		  A:	TRUE
		  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
		  A:	TRUE
		  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'welcome-visitors'
				  A:	TRUE
				  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))




Synthetize the controller for the branches of the CGT composing it with the new context
TRUE
TRUE
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_0/context.eps  ->   buchi generated
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="fire_alarm, shop, warehouse, day_time, night_time, entrance, human_entered, get_med, door_alarm, guard_entered" --outs="go_safe_loc, go_entrace, go_counter, go_back, go_warehouse, go_charging_point"


/home/cogomo/output/results/complete/cgt_clusters_original/cluster_0/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_0/controller.eps  ->   mealy machine generated
TRUE
TRUE
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_1/context.eps  ->   buchi generated
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & !guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G(door_alarm & ! guard_entered -> ((go_entrace U guard_entered) | G go_entrace))))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, low_battery, full_battery, door_alarm, guard_entered, fire_alarm, shop, warehouse, day_time, entrance, human_entered, get_med" --outs="go_entrace, go_counter, go_back, go_warehouse, go_charging_point, go_safe_loc"


UNREALIZABLE
TRUE
TRUE
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_2/context.eps  ->   buchi generated
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, fire_alarm, warehouse, night_time, entrance, human_entered, door_alarm, guard_entered" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, go_safe_loc, go_counter"


/home/cogomo/output/results/complete/cgt_clusters_original/cluster_2/specification.txt IS REALIZABLE
DOT file generated
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_2/controller.eps  ->   mealy machine generated
TRUE
TRUE
/home/cogomo/output/results/complete/cgt_clusters_original/cluster_3/context.eps  ->   buchi generated
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, fire_alarm, warehouse, night_time, door_alarm, guard_entered" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, welcome_client, go_safe_loc, go_counter"


TIMEOUT for synthesis, more than 100 sec
UNREALIZABLE

Clustering process finished. Results generated.
Process finished, results avilable
Clustering finished, exiting...
