...updating repository ...
/home/cogomo
Checking out files:   2% (11/419)   Checking out files:   3% (13/419)   Checking out files:   4% (17/419)   Checking out files:   5% (21/419)   Checking out files:   6% (26/419)   Checking out files:   7% (30/419)   Checking out files:   8% (34/419)   Checking out files:   9% (38/419)   Checking out files:  10% (42/419)   Checking out files:  11% (47/419)   Checking out files:  12% (51/419)   Checking out files:  13% (55/419)   Checking out files:  14% (59/419)   Checking out files:  15% (63/419)   Checking out files:  16% (68/419)   Checking out files:  17% (72/419)   Checking out files:  18% (76/419)   Checking out files:  19% (80/419)   Checking out files:  20% (84/419)   Checking out files:  21% (88/419)   Checking out files:  22% (93/419)   Checking out files:  23% (97/419)   Checking out files:  24% (101/419)   Checking out files:  25% (105/419)   Checking out files:  26% (109/419)   Checking out files:  27% (114/419)   Checking out files:  28% (118/419)   Checking out files:  29% (122/419)   Checking out files:  30% (126/419)   Checking out files:  31% (130/419)   Checking out files:  32% (135/419)   Checking out files:  33% (139/419)   Checking out files:  34% (143/419)   Checking out files:  35% (147/419)   Checking out files:  36% (151/419)   Checking out files:  37% (156/419)   Checking out files:  38% (160/419)   Checking out files:  39% (164/419)   Checking out files:  40% (168/419)   Checking out files:  41% (172/419)   Checking out files:  42% (176/419)   Checking out files:  43% (181/419)   Checking out files:  44% (185/419)   Checking out files:  45% (189/419)   Checking out files:  46% (193/419)   Checking out files:  47% (197/419)   Checking out files:  48% (202/419)   Checking out files:  49% (206/419)   Checking out files:  50% (210/419)   Checking out files:  51% (214/419)   Checking out files:  52% (218/419)   Checking out files:  53% (223/419)   Checking out files:  54% (227/419)   Checking out files:  55% (231/419)   Checking out files:  56% (235/419)   Checking out files:  57% (239/419)   Checking out files:  58% (244/419)   Checking out files:  59% (248/419)   Checking out files:  60% (252/419)   Checking out files:  61% (256/419)   Checking out files:  62% (260/419)   Checking out files:  63% (264/419)   Checking out files:  64% (269/419)   Checking out files:  65% (273/419)   Checking out files:  66% (277/419)   Checking out files:  67% (281/419)   Checking out files:  68% (285/419)   Checking out files:  69% (290/419)   Checking out files:  70% (294/419)   Checking out files:  71% (298/419)   Checking out files:  72% (302/419)   Checking out files:  73% (306/419)   Checking out files:  74% (311/419)   Checking out files:  75% (315/419)   Checking out files:  76% (319/419)   Checking out files:  77% (323/419)   Checking out files:  78% (327/419)   Checking out files:  79% (332/419)   Checking out files:  80% (336/419)   Checking out files:  81% (340/419)   Checking out files:  82% (344/419)   Checking out files:  83% (348/419)   Checking out files:  84% (352/419)   Checking out files:  85% (357/419)   Checking out files:  86% (361/419)   Checking out files:  87% (365/419)   Checking out files:  88% (369/419)   Checking out files:  89% (373/419)   Checking out files:  90% (378/419)   Checking out files:  91% (382/419)   Checking out files:  92% (386/419)   Checking out files:  93% (390/419)   Checking out files:  94% (394/419)   Checking out files:  95% (399/419)   Checking out files:  96% (403/419)   Checking out files:  97% (407/419)   Checking out files:  98% (411/419)   Checking out files:  99% (415/419)   Checking out files: 100% (419/419)   Checking out files: 100% (419/419), done.
HEAD is now at e1c3fc7 small fix
remote: Enumerating objects: 601, done.[K
remote: Counting objects:   0% (1/601)[Kremote: Counting objects:   1% (7/601)[Kremote: Counting objects:   2% (13/601)[Kremote: Counting objects:   3% (19/601)[Kremote: Counting objects:   4% (25/601)[Kremote: Counting objects:   5% (31/601)[Kremote: Counting objects:   6% (37/601)[Kremote: Counting objects:   7% (43/601)[Kremote: Counting objects:   8% (49/601)[Kremote: Counting objects:   9% (55/601)[Kremote: Counting objects:  10% (61/601)[Kremote: Counting objects:  11% (67/601)[Kremote: Counting objects:  12% (73/601)[Kremote: Counting objects:  13% (79/601)[Kremote: Counting objects:  14% (85/601)[Kremote: Counting objects:  15% (91/601)[Kremote: Counting objects:  16% (97/601)[Kremote: Counting objects:  17% (103/601)[Kremote: Counting objects:  18% (109/601)[Kremote: Counting objects:  19% (115/601)[Kremote: Counting objects:  20% (121/601)[Kremote: Counting objects:  21% (127/601)[Kremote: Counting objects:  22% (133/601)[Kremote: Counting objects:  23% (139/601)[Kremote: Counting objects:  24% (145/601)[Kremote: Counting objects:  25% (151/601)[Kremote: Counting objects:  26% (157/601)[Kremote: Counting objects:  27% (163/601)[Kremote: Counting objects:  28% (169/601)[Kremote: Counting objects:  29% (175/601)[Kremote: Counting objects:  30% (181/601)[Kremote: Counting objects:  31% (187/601)[Kremote: Counting objects:  32% (193/601)[Kremote: Counting objects:  33% (199/601)[Kremote: Counting objects:  34% (205/601)[Kremote: Counting objects:  35% (211/601)[Kremote: Counting objects:  36% (217/601)[Kremote: Counting objects:  37% (223/601)[Kremote: Counting objects:  38% (229/601)[Kremote: Counting objects:  39% (235/601)[Kremote: Counting objects:  40% (241/601)[Kremote: Counting objects:  41% (247/601)[Kremote: Counting objects:  42% (253/601)[Kremote: Counting objects:  43% (259/601)[Kremote: Counting objects:  44% (265/601)[Kremote: Counting objects:  45% (271/601)[Kremote: Counting objects:  46% (277/601)[Kremote: Counting objects:  47% (283/601)[Kremote: Counting objects:  48% (289/601)[Kremote: Counting objects:  49% (295/601)[Kremote: Counting objects:  50% (301/601)[Kremote: Counting objects:  51% (307/601)[Kremote: Counting objects:  52% (313/601)[Kremote: Counting objects:  53% (319/601)[Kremote: Counting objects:  54% (325/601)[Kremote: Counting objects:  55% (331/601)[Kremote: Counting objects:  56% (337/601)[Kremote: Counting objects:  57% (343/601)[Kremote: Counting objects:  58% (349/601)[Kremote: Counting objects:  59% (355/601)[Kremote: Counting objects:  60% (361/601)[Kremote: Counting objects:  61% (367/601)[Kremote: Counting objects:  62% (373/601)[Kremote: Counting objects:  63% (379/601)[Kremote: Counting objects:  64% (385/601)[Kremote: Counting objects:  65% (391/601)[Kremote: Counting objects:  66% (397/601)[Kremote: Counting objects:  67% (403/601)[Kremote: Counting objects:  68% (409/601)[Kremote: Counting objects:  69% (415/601)[Kremote: Counting objects:  70% (421/601)[Kremote: Counting objects:  71% (427/601)[Kremote: Counting objects:  72% (433/601)[Kremote: Counting objects:  73% (439/601)[Kremote: Counting objects:  74% (445/601)[Kremote: Counting objects:  75% (451/601)[Kremote: Counting objects:  76% (457/601)[Kremote: Counting objects:  77% (463/601)[Kremote: Counting objects:  78% (469/601)[Kremote: Counting objects:  79% (475/601)[Kremote: Counting objects:  80% (481/601)[Kremote: Counting objects:  81% (487/601)[Kremote: Counting objects:  82% (493/601)[Kremote: Counting objects:  83% (499/601)[Kremote: Counting objects:  84% (505/601)[Kremote: Counting objects:  85% (511/601)[Kremote: Counting objects:  86% (517/601)[Kremote: Counting objects:  87% (523/601)[Kremote: Counting objects:  88% (529/601)[Kremote: Counting objects:  89% (535/601)[Kremote: Counting objects:  90% (541/601)[Kremote: Counting objects:  91% (547/601)[Kremote: Counting objects:  92% (553/601)[Kremote: Counting objects:  93% (559/601)[Kremote: Counting objects:  94% (565/601)[Kremote: Counting objects:  95% (571/601)[Kremote: Counting objects:  96% (577/601)[Kremote: Counting objects:  97% (583/601)[Kremote: Counting objects:  98% (589/601)[Kremote: Counting objects:  99% (595/601)[Kremote: Counting objects: 100% (601/601)[Kremote: Counting objects: 100% (601/601), done.[K
remote: Compressing objects:   0% (1/241)[Kremote: Compressing objects:   1% (3/241)[Kremote: Compressing objects:   2% (5/241)[Kremote: Compressing objects:   3% (8/241)[Kremote: Compressing objects:   4% (10/241)[Kremote: Compressing objects:   5% (13/241)[Kremote: Compressing objects:   6% (15/241)[Kremote: Compressing objects:   7% (17/241)[Kremote: Compressing objects:   8% (20/241)[Kremote: Compressing objects:   9% (22/241)[Kremote: Compressing objects:  10% (25/241)[Kremote: Compressing objects:  11% (27/241)[Kremote: Compressing objects:  12% (29/241)[Kremote: Compressing objects:  13% (32/241)[Kremote: Compressing objects:  14% (34/241)[Kremote: Compressing objects:  15% (37/241)[Kremote: Compressing objects:  16% (39/241)[Kremote: Compressing objects:  17% (41/241)[Kremote: Compressing objects:  18% (44/241)[Kremote: Compressing objects:  19% (46/241)[Kremote: Compressing objects:  20% (49/241)[Kremote: Compressing objects:  21% (51/241)[Kremote: Compressing objects:  22% (54/241)[Kremote: Compressing objects:  23% (56/241)[Kremote: Compressing objects:  24% (58/241)[Kremote: Compressing objects:  25% (61/241)[Kremote: Compressing objects:  26% (63/241)[Kremote: Compressing objects:  27% (66/241)[Kremote: Compressing objects:  28% (68/241)[Kremote: Compressing objects:  29% (70/241)[Kremote: Compressing objects:  30% (73/241)[Kremote: Compressing objects:  31% (75/241)[Kremote: Compressing objects:  32% (78/241)[Kremote: Compressing objects:  33% (80/241)[Kremote: Compressing objects:  34% (82/241)[Kremote: Compressing objects:  35% (85/241)[Kremote: Compressing objects:  36% (87/241)[Kremote: Compressing objects:  37% (90/241)[Kremote: Compressing objects:  38% (92/241)[Kremote: Compressing objects:  39% (94/241)[Kremote: Compressing objects:  40% (97/241)[Kremote: Compressing objects:  41% (99/241)[Kremote: Compressing objects:  42% (102/241)[Kremote: Compressing objects:  43% (104/241)[Kremote: Compressing objects:  44% (107/241)[Kremote: Compressing objects:  45% (109/241)[Kremote: Compressing objects:  46% (111/241)[Kremote: Compressing objects:  47% (114/241)[Kremote: Compressing objects:  48% (116/241)[Kremote: Compressing objects:  49% (119/241)[Kremote: Compressing objects:  50% (121/241)[Kremote: Compressing objects:  51% (123/241)[Kremote: Compressing objects:  52% (126/241)[Kremote: Compressing objects:  53% (128/241)[Kremote: Compressing objects:  54% (131/241)[Kremote: Compressing objects:  55% (133/241)[Kremote: Compressing objects:  56% (135/241)[Kremote: Compressing objects:  57% (138/241)[Kremote: Compressing objects:  58% (140/241)[Kremote: Compressing objects:  59% (143/241)[Kremote: Compressing objects:  60% (145/241)[Kremote: Compressing objects:  61% (148/241)[Kremote: Compressing objects:  62% (150/241)[Kremote: Compressing objects:  63% (152/241)[Kremote: Compressing objects:  64% (155/241)[Kremote: Compressing objects:  65% (157/241)[Kremote: Compressing objects:  66% (160/241)[Kremote: Compressing objects:  67% (162/241)[Kremote: Compressing objects:  68% (164/241)[Kremote: Compressing objects:  69% (167/241)[Kremote: Compressing objects:  70% (169/241)[Kremote: Compressing objects:  71% (172/241)[Kremote: Compressing objects:  72% (174/241)[Kremote: Compressing objects:  73% (176/241)[Kremote: Compressing objects:  74% (179/241)[Kremote: Compressing objects:  75% (181/241)[Kremote: Compressing objects:  76% (184/241)[Kremote: Compressing objects:  77% (186/241)[Kremote: Compressing objects:  78% (188/241)[Kremote: Compressing objects:  79% (191/241)[Kremote: Compressing objects:  80% (193/241)[Kremote: Compressing objects:  81% (196/241)[Kremote: Compressing objects:  82% (198/241)[Kremote: Compressing objects:  83% (201/241)[Kremote: Compressing objects:  84% (203/241)[Kremote: Compressing objects:  85% (205/241)[Kremote: Compressing objects:  86% (208/241)[Kremote: Compressing objects:  87% (210/241)[Kremote: Compressing objects:  88% (213/241)[Kremote: Compressing objects:  89% (215/241)[Kremote: Compressing objects:  90% (217/241)[Kremote: Compressing objects:  91% (220/241)[Kremote: Compressing objects:  92% (222/241)[Kremote: Compressing objects:  93% (225/241)[Kremote: Compressing objects:  94% (227/241)[Kremote: Compressing objects:  95% (229/241)[Kremote: Compressing objects:  96% (232/241)[Kremote: Compressing objects:  97% (234/241)[Kremote: Compressing objects:  98% (237/241)[Kremote: Compressing objects:  99% (239/241)[Kremote: Compressing objects: 100% (241/241)[Kremote: Compressing objects: 100% (241/241), done.[K
Receiving objects:   0% (1/3828)   Receiving objects:   1% (39/3828)   Receiving objects:   2% (77/3828)   Receiving objects:   3% (115/3828)   Receiving objects:   4% (154/3828)   Receiving objects:   5% (192/3828)   Receiving objects:   6% (230/3828)   Receiving objects:   7% (268/3828)   Receiving objects:   8% (307/3828)   Receiving objects:   9% (345/3828)   Receiving objects:  10% (383/3828)   Receiving objects:  11% (422/3828)   Receiving objects:  12% (460/3828)   Receiving objects:  13% (498/3828)   Receiving objects:  14% (536/3828)   Receiving objects:  15% (575/3828)   Receiving objects:  16% (613/3828)   Receiving objects:  17% (651/3828)   Receiving objects:  18% (690/3828)   Receiving objects:  19% (728/3828)   Receiving objects:  20% (766/3828)   Receiving objects:  21% (804/3828)   Receiving objects:  22% (843/3828)   Receiving objects:  23% (881/3828)   Receiving objects:  24% (919/3828)   Receiving objects:  25% (957/3828)   Receiving objects:  26% (996/3828)   Receiving objects:  27% (1034/3828)   Receiving objects:  28% (1072/3828)   Receiving objects:  29% (1111/3828)   Receiving objects:  30% (1149/3828)   Receiving objects:  31% (1187/3828)   Receiving objects:  32% (1225/3828)   Receiving objects:  33% (1264/3828)   Receiving objects:  34% (1302/3828)   Receiving objects:  35% (1340/3828)   Receiving objects:  36% (1379/3828)   Receiving objects:  37% (1417/3828)   Receiving objects:  38% (1455/3828)   Receiving objects:  39% (1493/3828)   Receiving objects:  40% (1532/3828)   Receiving objects:  41% (1570/3828)   Receiving objects:  42% (1608/3828)   Receiving objects:  43% (1647/3828)   Receiving objects:  44% (1685/3828)   Receiving objects:  45% (1723/3828)   Receiving objects:  46% (1761/3828)   Receiving objects:  47% (1800/3828)   Receiving objects:  48% (1838/3828)   Receiving objects:  49% (1876/3828)   Receiving objects:  50% (1914/3828)   Receiving objects:  51% (1953/3828)   Receiving objects:  52% (1991/3828)   Receiving objects:  53% (2029/3828)   Receiving objects:  54% (2068/3828)   Receiving objects:  55% (2106/3828)   Receiving objects:  56% (2144/3828)   Receiving objects:  57% (2182/3828)   Receiving objects:  58% (2221/3828)   Receiving objects:  59% (2259/3828)   Receiving objects:  60% (2297/3828)   Receiving objects:  61% (2336/3828)   Receiving objects:  62% (2374/3828)   Receiving objects:  63% (2412/3828)   Receiving objects:  64% (2450/3828)   Receiving objects:  65% (2489/3828)   Receiving objects:  66% (2527/3828)   Receiving objects:  67% (2565/3828)   Receiving objects:  68% (2604/3828)   Receiving objects:  69% (2642/3828)   Receiving objects:  70% (2680/3828)   Receiving objects:  71% (2718/3828)   Receiving objects:  72% (2757/3828)   Receiving objects:  73% (2795/3828)   Receiving objects:  74% (2833/3828)   Receiving objects:  75% (2871/3828)   Receiving objects:  76% (2910/3828)   Receiving objects:  77% (2948/3828)   Receiving objects:  78% (2986/3828)   Receiving objects:  79% (3025/3828)   Receiving objects:  80% (3063/3828)   Receiving objects:  81% (3101/3828)   Receiving objects:  82% (3139/3828)   Receiving objects:  83% (3178/3828)   Receiving objects:  84% (3216/3828)   Receiving objects:  85% (3254/3828)   Receiving objects:  86% (3293/3828)   Receiving objects:  87% (3331/3828)   Receiving objects:  88% (3369/3828)   Receiving objects:  89% (3407/3828)   Receiving objects:  90% (3446/3828)   Receiving objects:  91% (3484/3828)   remote: Total 3828 (delta 409), reused 515 (delta 327), pack-reused 3227[K
Receiving objects:  92% (3522/3828)   Receiving objects:  93% (3561/3828)   Receiving objects:  94% (3599/3828)   Receiving objects:  95% (3637/3828)   Receiving objects:  96% (3675/3828)   Receiving objects:  97% (3714/3828)   Receiving objects:  98% (3752/3828)   Receiving objects:  99% (3790/3828)   Receiving objects: 100% (3828/3828)   Receiving objects: 100% (3828/3828), 1.12 MiB | 2.36 MiB/s, done.
Resolving deltas:   0% (0/2733)   Resolving deltas:   3% (108/2733)   Resolving deltas:   4% (115/2733)   Resolving deltas:   5% (142/2733)   Resolving deltas:   8% (223/2733)   Resolving deltas:   9% (256/2733)   Resolving deltas:  11% (313/2733)   Resolving deltas:  13% (365/2733)   Resolving deltas:  14% (390/2733)   Resolving deltas:  15% (427/2733)   Resolving deltas:  16% (439/2733)   Resolving deltas:  17% (465/2733)   Resolving deltas:  20% (563/2733)   Resolving deltas:  21% (583/2733)   Resolving deltas:  22% (606/2733)   Resolving deltas:  23% (633/2733)   Resolving deltas:  24% (657/2733)   Resolving deltas:  25% (689/2733)   Resolving deltas:  26% (727/2733)   Resolving deltas:  28% (791/2733)   Resolving deltas:  29% (811/2733)   Resolving deltas:  30% (820/2733)   Resolving deltas:  32% (892/2733)   Resolving deltas:  37% (1034/2733)   Resolving deltas:  38% (1057/2733)   Resolving deltas:  39% (1067/2733)   Resolving deltas:  40% (1120/2733)   Resolving deltas:  41% (1127/2733)   Resolving deltas:  51% (1415/2733)   Resolving deltas:  74% (2040/2733)   Resolving deltas:  79% (2171/2733)   Resolving deltas:  80% (2191/2733)   Resolving deltas:  81% (2214/2733)   Resolving deltas:  82% (2245/2733)   Resolving deltas:  83% (2270/2733)   Resolving deltas:  84% (2299/2733)   Resolving deltas:  85% (2341/2733)   Resolving deltas:  87% (2379/2733)   Resolving deltas:  88% (2406/2733)   Resolving deltas:  89% (2455/2733)   Resolving deltas:  91% (2490/2733)   Resolving deltas:  92% (2516/2733)   Resolving deltas:  93% (2543/2733)   Resolving deltas:  94% (2586/2733)   Resolving deltas:  95% (2598/2733)   Resolving deltas:  97% (2660/2733)   Resolving deltas:  98% (2694/2733)   Resolving deltas:  99% (2718/2733)   Resolving deltas: 100% (2733/2733)   Resolving deltas: 100% (2733/2733), completed with 46 local objects.
From https://github.com/pierg/cogomo
   e1c3fc7..0d5d8b7  master     -> origin/master
Updating e1c3fc7..0d5d8b7
Fast-forward
 Dockerfile                                         |    2 [32m+[m[31m-[m
 bin/ubuntu_19.10/owl.jar                           |  Bin [31m0[m -> [32m4251364[m bytes
 bin/ubuntu_19.10/strix                             |  Bin [31m0[m -> [32m17103616[m bytes
 clustering_input.py                                |  133 [31m-[m
 clustering_run.py                                  |   63 [31m-[m
 entrypoint.sh                                      |    4 [32m+[m[31m-[m
 main_tests.py                                      |  257 [31m--[m
 mission_specification.py                           |  187 [32m++[m
 .../input_text_files}/mission_example.txt          |    0
 .../input_text_files}/mission_example_contexts.txt |    0
 .../input_text_files}/pattern_example.json         |    0
 .../input_text_files}/robots_components_simple.txt |    0
 .../input_text_files}/robots_patterns_simple.txt   |    0
 nusmvfile.smv                                      |   13 [32m+[m[31m-[m
 output/clustering/context-based-cgt.txt            |  132 [31m-[m
 results/CROME/CASE_GOOD/logs.txt                   | 1173 [32m+++++++++[m
 results/CROME/CASE_GOOD/mission_specification.py   |  187 [32m++[m
 results/CROME/CASE_GOOD/results/SUMMARY.txt        |   70 [32m+[m
 .../results/cgt_clusters_original/CGT.txt          |   86 [32m+[m
 .../cgt_clusters_original/cluster_0/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_0/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_0/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_0/controller.eps |  252 [32m++[m
 .../cluster_0/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_1/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_1/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_1/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_1/controller.eps |  951 [32m+++++++[m
 .../cluster_1/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_2/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_2/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_2/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_2/controller.eps | 2192 [32m++++++++++++++++[m
 .../cluster_2/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_3/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_3/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_3/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_3/controller.eps | 1591 [32m++++++++++++[m
 .../cluster_3/specification.txt                    |   28 [32m+[m
 .../CASE_GOOD/results/cgt_no_clusters/CGT.txt      |   44 [32m+[m
 .../results/cgt_no_clusters/controller.dot         |    1 [32m+[m
 .../results/cgt_no_clusters/controller.eps         | 2712 [32m++++++++++++++++++++[m
 .../results/cgt_no_clusters/specification.txt      |   28 [32m+[m
 .../CROME/CASE_GOOD/results/complete/SUMMARY.txt   |   32 [32m+[m
 .../results/complete/cgt_no_clusters/CGT.txt       |   44 [32m+[m
 .../complete/cgt_no_clusters/specification.txt     |   36 [32m+[m
 .../complete/goal_list/fire-alarm/controller.dot   |    1 [32m+[m
 .../complete/goal_list/fire-alarm/controller.eps   |  264 [32m++[m
 .../goal_list/fire-alarm/specification.txt         |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../goal_list/get-meds-to-clients/controller.eps   |  791 [32m++++++[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../complete/goal_list/low-battery/controller.dot  |    1 [32m+[m
 .../complete/goal_list/low-battery/controller.eps  |  258 [32m++[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../goal_list/night-time-patroling/controller.eps  |  636 [32m+++++[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../complete/goal_list/shop-alarm/controller.dot   |    1 [32m+[m
 .../complete/goal_list/shop-alarm/controller.eps   |  412 [32m+++[m
 .../goal_list/shop-alarm/specification.txt         |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/controller.eps      |  335 [32m+++[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/controller.eps    |  264 [32m++[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../goal_list/get-meds-to-clients/controller.eps   |  791 [32m++++++[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../results/goal_list/low-battery/controller.eps   |  258 [32m++[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../goal_list/night-time-patroling/controller.eps  |  636 [32m+++++[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/shop-alarm/controller.eps    |  412 [32m+++[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/controller.eps      |  335 [32m+++[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 results/CROME/CASE_WRONG_PATTERN/logs.txt          | 1172 [32m+++++++++[m
 .../CASE_WRONG_PATTERN/mission_specification.py    |  187 [32m++[m
 .../CROME/CASE_WRONG_PATTERN/results/SUMMARY.txt   |   74 [32m+[m
 .../results/cgt_clusters_original/CGT.txt          |   86 [32m+[m
 .../cgt_clusters_original/cluster_0/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_0/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_0/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_0/controller.eps |  252 [32m++[m
 .../cluster_0/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_1/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_1/context.eps    |  252 [32m++[m
 .../cluster_1/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_2/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_2/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_2/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_2/controller.eps | 2192 [32m++++++++++++++++[m
 .../cluster_2/specification.txt                    |   28 [32m+[m
 .../cgt_clusters_original/cluster_3/context.dot    |    1 [32m+[m
 .../cgt_clusters_original/cluster_3/context.eps    |  252 [32m++[m
 .../cgt_clusters_original/cluster_3/controller.dot |    1 [32m+[m
 .../cgt_clusters_original/cluster_3/controller.eps | 1309 [32m++++++++++[m
 .../cluster_3/specification.txt                    |   28 [32m+[m
 .../results/cgt_no_clusters/CGT.txt                |   44 [32m+[m
 .../results/cgt_no_clusters/specification.txt      |   28 [32m+[m
 .../results/complete/SUMMARY.txt                   |   32 [32m+[m
 .../results/complete/cgt_no_clusters/CGT.txt       |   44 [32m+[m
 .../complete/cgt_no_clusters/specification.txt     |   36 [32m+[m
 .../complete/goal_list/fire-alarm/controller.dot   |    1 [32m+[m
 .../complete/goal_list/fire-alarm/controller.eps   |  264 [32m++[m
 .../goal_list/fire-alarm/specification.txt         |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../goal_list/get-meds-to-clients/controller.eps   |  791 [32m++++++[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../complete/goal_list/low-battery/controller.dot  |    1 [32m+[m
 .../complete/goal_list/low-battery/controller.eps  |  258 [32m++[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../goal_list/night-time-patroling/controller.eps  |  638 [32m+++++[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../complete/goal_list/shop-alarm/controller.dot   |    1 [32m+[m
 .../complete/goal_list/shop-alarm/controller.eps   |  462 [32m++++[m
 .../goal_list/shop-alarm/specification.txt         |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/controller.eps      |  332 [32m+++[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 .../results/goal_list/fire-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/fire-alarm/controller.eps    |  264 [32m++[m
 .../results/goal_list/fire-alarm/specification.txt |   36 [32m+[m
 .../goal_list/get-meds-to-clients/controller.dot   |    1 [32m+[m
 .../goal_list/get-meds-to-clients/controller.eps   |  791 [32m++++++[m
 .../get-meds-to-clients/specification.txt          |   36 [32m+[m
 .../results/goal_list/low-battery/controller.dot   |    1 [32m+[m
 .../results/goal_list/low-battery/controller.eps   |  258 [32m++[m
 .../goal_list/low-battery/specification.txt        |   36 [32m+[m
 .../goal_list/night-time-patroling/controller.dot  |    1 [32m+[m
 .../goal_list/night-time-patroling/controller.eps  |  638 [32m+++++[m
 .../night-time-patroling/specification.txt         |   36 [32m+[m
 .../results/goal_list/shop-alarm/controller.dot    |    1 [32m+[m
 .../results/goal_list/shop-alarm/controller.eps    |  462 [32m++++[m
 .../results/goal_list/shop-alarm/specification.txt |   36 [32m+[m
 .../goal_list/welcome-visitors/controller.dot      |    1 [32m+[m
 .../goal_list/welcome-visitors/controller.eps      |  332 [32m+++[m
 .../goal_list/welcome-visitors/specification.txt   |   36 [32m+[m
 results/CROME/run.sh                               |   55 [32m+[m
 .../c1-nostrict/mission_specification.py           |  169 [32m++[m
 results/clustering/c1/mission_specification.py     |  196 [32m++[m
 results/clustering/c2/mission_specification.py     |  170 [32m++[m
 results/clustering/c3/mission_specification.py     |  170 [32m++[m
 results/clustering/c4/mission_specification.py     |  171 [32m++[m
 results/clustering/comb.sh                         |   46 [32m+[m
 .../n1-fixed-prompt/mission_specification.py       |  170 [32m++[m
 results/clustering/n1/mission_specification.py     |  170 [32m++[m
 results/clustering/n10-1/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-2/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-3/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-4/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-5/mission_specification.py  |  188 [32m++[m
 results/clustering/n10-6/mission_specification.py  |  187 [32m++[m
 results/clustering/n10-7/mission_specification.py  |  188 [32m++[m
 .../clustering/n10-8-1/mission_specification.py    |  189 [32m++[m
 .../clustering/n10-8-2/mission_specification.py    |  191 [32m++[m
 .../clustering/n10-8-3/mission_specification.py    |  192 [32m++[m
 results/clustering/n10-8/mission_specification.py  |  189 [32m++[m
 results/clustering/n10/mission_specification.py    |  185 [32m++[m
 results/clustering/n11-1/mission_specification.py  |  188 [32m++[m
 results/clustering/n11-2/mission_specification.py  |  188 [32m++[m
 results/clustering/n11-3/mission_specification.py  |  186 [32m++[m
 .../clustering/n11-4-good/mission_specification.py |  187 [32m++[m
 .../n11-4-patrol/mission_specification.py          |  187 [32m++[m
 .../n11-4-visit/mission_specification.py           |  187 [32m++[m
 results/clustering/n11-5/mission_specification.py  |  187 [32m++[m
 results/clustering/n11-6/mission_specification.py  |  186 [32m++[m
 results/clustering/n11/mission_specification.py    |  191 [32m++[m
 results/clustering/n12/mission_specification.py    |  186 [32m++[m
 results/clustering/n13-1/mission_specification.py  |  186 [32m++[m
 results/clustering/n13-2/mission_specification.py  |  190 [32m++[m
 results/clustering/n13-4/mission_specification.py  |  187 [32m++[m
 .../clustering/n13-good/mission_specification.py   |  187 [32m++[m
 .../clustering/n2-nofire/mission_specification.py  |  180 [32m++[m
 results/clustering/n2/mission_specification.py     |  180 [32m++[m
 results/clustering/n3/mission_specification.py     |  193 [32m++[m
 results/clustering/n4/mission_specification.py     |  195 [32m++[m
 results/clustering/n5/mission_specification.py     |  195 [32m++[m
 results/clustering/n6/mission_specification.py     |  195 [32m++[m
 results/clustering/n7/mission_specification.py     |  195 [32m++[m
 results/clustering/n8-2/mission_specification.py   |  188 [32m++[m
 results/clustering/n8-3/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-4/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-5/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-6/mission_specification.py   |  190 [32m++[m
 results/clustering/n8-7/mission_specification.py   |  204 [32m++[m
 results/clustering/n8-8/mission_specification.py   |  204 [32m++[m
 results/clustering/n8/mission_specification.py     |  187 [32m++[m
 results/clustering/n9/mission_specification.py     |  202 [32m++[m
 results/clustering/pull.sh                         |    5 [32m+[m
 results/clustering/push.sh                         |    7 [32m+[m
 results/clustering/run.sh                          |   55 [32m+[m
 .../sefm-always/mission_specification.py           |  187 [32m++[m
 .../sefm-betty-fixed/mission_specification.py      |  187 [32m++[m
 .../clustering/sefm-betty/mission_specification.py |  187 [32m++[m
 .../test-conflict/mission_specification.py         |  117 [32m+[m
 .../test-scopes-liveness/mission_specification.py  |  155 [32m++[m
 .../test-scopes/mission_specification.py           |  155 [32m++[m
 run.sh                                             |   30 [32m+[m[31m-[m
 run_clustering.py                                  |  350 [32m+++[m
 run_clustering_combinations.py                     |   78 [32m+[m
 mapping_run.py => run_mapping.py                   |    4 [32m+[m[31m-[m
 src/checks/nusmv.py                                |    4 [32m+[m
 src/checks/tools.py                                |    2 [32m+[m
 src/contracts/contract.py                          |   26 [32m+[m[31m-[m
 src/contracts/operations.py                        |    6 [32m+[m[31m-[m
 src/controller/synthesis.py                        |   74 [32m+[m[31m-[m
 src/goals/cgtgoal.py                               |   58 [32m+[m[31m-[m
 src/goals/helpers.py                               |  191 [32m+[m[31m-[m
 src/goals/operations.py                            |  267 [32m+[m[31m-[m
 src/helper/buchi.py                                |  185 [32m+[m[31m-[m
 src/helper/tools.py                                |    2 [32m+[m[31m-[m
 src/typescogomo/formula.py                         |  110 [32m+[m[31m-[m
 src/typescogomo/formulae.py                        |   92 [32m+[m[31m-[m
 src/typescogomo/guarantee.py                       |    6 [32m+[m[31m-[m
 src/typescogomo/patterns.py                        |  222 [32m+[m[31m-[m
 src/typescogomo/scopes.py                          |  119 [32m+[m[31m-[m
 src/z3/tests/test_component_selection.py           |    4 [32m+[m[31m-[m
 src/z3/tests/test_greedy_selection.py              |    4 [32m+[m[31m-[m
 tests/components/test_component_selection.py       |    6 [32m+[m[31m-[m
 tests/components/test_port.py                      |    2 [32m+[m[31m-[m
 tests/goals/test_consolidation.py                  |    4 [32m+[m[31m-[m
 tests/goals/test_mapping.py                        |   12 [32m+[m[31m-[m
 web/static/assets/js/ltl/app.js                    |    2 [32m+[m[31m-[m
 web/static/assets/js/z3/app.js                     |    2 [32m+[m[31m-[m
 232 files changed, 40888 insertions(+), 979 deletions(-)
 create mode 100644 bin/ubuntu_19.10/owl.jar
 create mode 100755 bin/ubuntu_19.10/strix
 delete mode 100644 clustering_input.py
 delete mode 100644 clustering_run.py
 delete mode 100644 main_tests.py
 create mode 100644 mission_specification.py
 rename {input_files => missions/input_text_files}/mission_example.txt (100%)
 rename {input_files => missions/input_text_files}/mission_example_contexts.txt (100%)
 rename {input_files => missions/input_text_files}/pattern_example.json (100%)
 rename {input_files => missions/input_text_files}/robots_components_simple.txt (100%)
 rename {input_files => missions/input_text_files}/robots_patterns_simple.txt (100%)
 delete mode 100644 output/clustering/context-based-cgt.txt
 create mode 100644 results/CROME/CASE_GOOD/logs.txt
 create mode 100644 results/CROME/CASE_GOOD/mission_specification.py
 create mode 100644 results/CROME/CASE_GOOD/results/SUMMARY.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/CGT.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_0/context.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_0/context.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_0/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_0/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_0/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_1/context.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_1/context.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_1/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_1/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_1/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_2/context.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_2/context.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_2/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_2/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_2/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_3/context.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_3/context.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_3/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_3/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_clusters_original/cluster_3/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_no_clusters/CGT.txt
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_no_clusters/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_no_clusters/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/cgt_no_clusters/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/SUMMARY.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/cgt_no_clusters/CGT.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/cgt_no_clusters/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/fire-alarm/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/get-meds-to-clients/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/low-battery/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/night-time-patroling/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/shop-alarm/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/shop-alarm/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/welcome-visitors/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/complete/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/fire-alarm/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/get-meds-to-clients/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/low-battery/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/night-time-patroling/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/shop-alarm/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/shop-alarm/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/welcome-visitors/controller.eps
 create mode 100644 results/CROME/CASE_GOOD/results/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/logs.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/mission_specification.py
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/SUMMARY.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/CGT.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_0/context.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_0/context.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_0/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_0/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_0/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_1/context.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_1/context.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_1/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_2/context.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_2/context.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_2/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_2/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_2/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_3/context.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_3/context.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_3/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_3/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_clusters_original/cluster_3/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_no_clusters/CGT.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/cgt_no_clusters/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/SUMMARY.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/cgt_no_clusters/CGT.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/cgt_no_clusters/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/fire-alarm/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/get-meds-to-clients/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/low-battery/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/night-time-patroling/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/shop-alarm/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/shop-alarm/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/welcome-visitors/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/complete/goal_list/welcome-visitors/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/fire-alarm/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/fire-alarm/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/fire-alarm/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/get-meds-to-clients/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/get-meds-to-clients/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/get-meds-to-clients/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/low-battery/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/low-battery/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/low-battery/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/night-time-patroling/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/night-time-patroling/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/night-time-patroling/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/shop-alarm/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/shop-alarm/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/shop-alarm/specification.txt
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/welcome-visitors/controller.dot
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/welcome-visitors/controller.eps
 create mode 100644 results/CROME/CASE_WRONG_PATTERN/results/goal_list/welcome-visitors/specification.txt
 create mode 100755 results/CROME/run.sh
 create mode 100644 results/clustering/c1-nostrict/mission_specification.py
 create mode 100644 results/clustering/c1/mission_specification.py
 create mode 100644 results/clustering/c2/mission_specification.py
 create mode 100644 results/clustering/c3/mission_specification.py
 create mode 100644 results/clustering/c4/mission_specification.py
 create mode 100755 results/clustering/comb.sh
 create mode 100644 results/clustering/n1-fixed-prompt/mission_specification.py
 create mode 100644 results/clustering/n1/mission_specification.py
 create mode 100644 results/clustering/n10-1/mission_specification.py
 create mode 100644 results/clustering/n10-2/mission_specification.py
 create mode 100644 results/clustering/n10-3/mission_specification.py
 create mode 100644 results/clustering/n10-4/mission_specification.py
 create mode 100644 results/clustering/n10-5/mission_specification.py
 create mode 100644 results/clustering/n10-6/mission_specification.py
 create mode 100644 results/clustering/n10-7/mission_specification.py
 create mode 100644 results/clustering/n10-8-1/mission_specification.py
 create mode 100644 results/clustering/n10-8-2/mission_specification.py
 create mode 100644 results/clustering/n10-8-3/mission_specification.py
 create mode 100644 results/clustering/n10-8/mission_specification.py
 create mode 100644 results/clustering/n10/mission_specification.py
 create mode 100644 results/clustering/n11-1/mission_specification.py
 create mode 100644 results/clustering/n11-2/mission_specification.py
 create mode 100644 results/clustering/n11-3/mission_specification.py
 create mode 100644 results/clustering/n11-4-good/mission_specification.py
 create mode 100644 results/clustering/n11-4-patrol/mission_specification.py
 create mode 100644 results/clustering/n11-4-visit/mission_specification.py
 create mode 100644 results/clustering/n11-5/mission_specification.py
 create mode 100644 results/clustering/n11-6/mission_specification.py
 create mode 100644 results/clustering/n11/mission_specification.py
 create mode 100644 results/clustering/n12/mission_specification.py
 create mode 100644 results/clustering/n13-1/mission_specification.py
 create mode 100644 results/clustering/n13-2/mission_specification.py
 create mode 100644 results/clustering/n13-4/mission_specification.py
 create mode 100644 results/clustering/n13-good/mission_specification.py
 create mode 100644 results/clustering/n2-nofire/mission_specification.py
 create mode 100644 results/clustering/n2/mission_specification.py
 create mode 100644 results/clustering/n3/mission_specification.py
 create mode 100644 results/clustering/n4/mission_specification.py
 create mode 100644 results/clustering/n5/mission_specification.py
 create mode 100644 results/clustering/n6/mission_specification.py
 create mode 100644 results/clustering/n7/mission_specification.py
 create mode 100644 results/clustering/n8-2/mission_specification.py
 create mode 100644 results/clustering/n8-3/mission_specification.py
 create mode 100644 results/clustering/n8-4/mission_specification.py
 create mode 100644 results/clustering/n8-5/mission_specification.py
 create mode 100644 results/clustering/n8-6/mission_specification.py
 create mode 100644 results/clustering/n8-7/mission_specification.py
 create mode 100644 results/clustering/n8-8/mission_specification.py
 create mode 100644 results/clustering/n8/mission_specification.py
 create mode 100644 results/clustering/n9/mission_specification.py
 create mode 100755 results/clustering/pull.sh
 create mode 100755 results/clustering/push.sh
 create mode 100755 results/clustering/run.sh
 create mode 100644 results/clustering/sefm-always/mission_specification.py
 create mode 100644 results/clustering/sefm-betty-fixed/mission_specification.py
 create mode 100644 results/clustering/sefm-betty/mission_specification.py
 create mode 100644 results/clustering/test-conflict/mission_specification.py
 create mode 100644 results/clustering/test-scopes-liveness/mission_specification.py
 create mode 100644 results/clustering/test-scopes/mission_specification.py
 create mode 100644 run_clustering.py
 create mode 100644 run_clustering_combinations.py
 rename mapping_run.py => run_mapping.py (97%)
...evaluation launch_script...
Launching clustering...
Copying custom input file if exists...
Launching clustering...
CUSTOM SPEC c2:
/home/cogomo
			SAT:	night_time
			SAT:	day_time
			SAT:	low_battery
			SAT:	full_battery
			SAT:	entrance
			SAT:	shop
			SAT:	get_med
			SAT:	warehouse
			SAT:	human_entered
			SAT:	guard_entered
			SAT:	door_alarm
			SAT:	fire_alarm
			SAT:	go_entrace
			SAT:	go_counter
			SAT:	go_back
			SAT:	go_warehouse
			SAT:	go_charging_point
			SAT:	go_safe_loc
			SAT:	contact_station
			SAT:	welcome_client
			SAT:	take_med
			SAT:	give_med
			SAT:	!(fire_alarm)
			SAT:	night_time
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
			SAT:	G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))
GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


			SAT:	(shop & day_time)
			SAT:	(shop & day_time)
			SAT:	(F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace)))))
			SAT:	G((go_warehouse) -> (take_med))
			SAT:	G((go_entrace) -> (give_med))
			SAT:	((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
			SAT:	G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))
GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


			SAT:	(day_time & entrance)
			SAT:	(day_time & entrance)
			SAT:	G((human_entered) -> F(welcome_client))
			SAT:	G((human_entered) -> F(welcome_client))
			SAT:	G((human_entered) -> F(welcome_client))
GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


			SAT:	night_time
			SAT:	(G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))
			SAT:	(G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))
			SAT:	(G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))
GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))


			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G((fire_alarm) -> (go_safe_loc))
GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))


GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/goal_list/night-time-patroling/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_entrace, take_med, go_charging_point, give_med, go_safe_loc, go_back, go_counter"


/home/cogomo/output/results/goal_list/get-meds-to-clients/specification.txt IS REALIZABLE
DOT file generated
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, low_battery, get_med, fire_alarm, day_time, door_alarm, full_battery, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/goal_list/low-battery/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, human_entered, night_time, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, welcome_client, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/goal_list/welcome-visitors/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> (G((door_alarm & !  guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, guard_entered, warehouse, night_time, human_entered, get_med, fire_alarm, day_time, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/goal_list/shop-alarm/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/goal_list/fire-alarm/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
			SAT:	(G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
The conjunction satisfiable.
GOAL:	'fire-alarm^^get-meds-to-clients^^low-battery^^night-time-patroling^^shop-alarm^^welcome-visitors'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
	/\ 
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
	/\ 
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
	/\ 
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
	/\ 
  A:	TRUE
  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
	/\ 
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	CONJUNCTION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & !  guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, door_alarm, guard_entered, fire_alarm" --outs="go_entrace, go_counter, go_back, go_warehouse, take_med, give_med, go_charging_point, welcome_client, go_safe_loc"


/home/cogomo/output/results/cgt_no_clusters/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)




6 GOALS
CONTEXTS:['night_time', '(shop & day_time)', 'TRUE', '(day_time & entrance)']





__ALL_COMBINATIONS_(15)___________________________________________________________
night_time			!((shop & day_time))			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			!(night_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			!(night_time)			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(day_time & entrance)			!(night_time)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			!(TRUE)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			!((shop & day_time))			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(day_time & entrance)			!((shop & day_time))			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			!(night_time)			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			(day_time & entrance)			!(night_time)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
TRUE			(day_time & entrance)			!(night_time)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			!((day_time & entrance))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			(day_time & entrance)			!(TRUE)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			TRUE			(day_time & entrance)			!((shop & day_time))			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
(shop & day_time)			TRUE			(day_time & entrance)			!(night_time)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)
night_time			(shop & day_time)			TRUE			(day_time & entrance)			G(((shop & !(warehouse)) | (warehouse & !(shop))))			G(((day_time & !(night_time)) | (night_time & !(day_time))))			G(entrance -> shop)			G(human_entered -> shop)			G(get_med -> entrance)			G(fire_alarm -> warehouse)			G(door_alarm -> shop)			G(guard_entered -> shop)


MERGING 15 CONTEXTS...
			SAT:	(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
			SAT:	((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


__MERGED_____________________________________________________________________
(TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
(night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))


MAPPING 6 GOALS TO 4 CONTEXTS
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: (TRUE & !(night_time) & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	(((night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (night_time))
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: night_time
Ctx: (night_time & TRUE & !((shop & day_time)) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
Ctx: ((shop & day_time) & TRUE & !(night_time) & !((day_time & entrance)) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((shop & day_time)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (shop & day_time)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
			VALID:	((((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((day_time & entrance)))
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: (day_time & entrance)
Ctx: ((shop & day_time) & TRUE & (day_time & entrance) & !(night_time) & G(((shop & !(warehouse)) | (warehouse & !(shop)))) & G(((day_time & !(night_time)) | (night_time & !(day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop)) 	-->	 Goal_ctx: TRUE
*** ALL GOAL HAVE BEEN MAPPED TO A CONTEXT ***
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE ]
  guarantees_satur :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	COMPOSITION
		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
Composed contract:
  variables:	[ go_entrace, go_counter, go_back, go_warehouse, night_time, low_battery, full_battery, go_charging_point, door_alarm, guard_entered, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))))
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))) -> (((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))))
The composition is compatible, consistent and feasible
Simplifying assumption TRUE
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			VALID:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
Composed contract:
  variables:	[ get_med, go_back, go_warehouse, go_entrace, take_med, give_med, shop, day_time, low_battery, full_battery, go_charging_point, human_entered, welcome_client, entrance, fire_alarm, go_safe_loc ]
  assumptions      :	[ TRUE, TRUE, TRUE ]
  guarantees_satur :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]
  guarantees_unsat :	[ G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))), (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))), G((human_entered) -> F(welcome_client)), G((fire_alarm) -> (go_safe_loc)) ]

GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	COMPOSITION
		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


The conjunction satisfiable.
GOAL:	'fire-alarm||get-meds-to-clients||low-battery^^fire-alarm||get-meds-to-clients||low-battery||welcome-visitors^^fire-alarm||low-battery^^fire-alarm||low-battery||night-time-patroling||shop-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))
	/\ 
  A:	TRUE
  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
	/\ 
  A:	TRUE
  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

	CONJUNCTION
		GOAL:	'fire-alarm||low-battery'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))

			COMPOSITION
				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||low-battery||night-time-patroling||shop-alarm'
		  A:	TRUE
		  G:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'night-time-patroling'
				  A:	TRUE
				  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'shop-alarm'
				  A:	TRUE
				  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery'
		  A:	TRUE
		  G:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))

		GOAL:	'fire-alarm||get-meds-to-clients||low-battery||welcome-visitors'
		  A:	TRUE
		  G:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))

			COMPOSITION
				GOAL:	'get-meds-to-clients'
				  A:	TRUE
				  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

				GOAL:	'low-battery'
				  A:	TRUE
				  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

				GOAL:	'welcome-visitors'
				  A:	TRUE
				  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

				GOAL:	'fire-alarm'
				  A:	TRUE
				  G:	G((fire_alarm) -> (go_safe_loc))




Synthetize the controller for the branches of the CGT composing it with the new context
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="fire_alarm" --outs="go_safe_loc, go_entrace, go_counter, go_back, go_warehouse, go_charging_point"


/home/cogomo/output/results/cgt_clusters_original/cluster_0/specification.txt IS REALIZABLE
DOT file generated
			SAT:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((night_time) -> (G((door_alarm & !  guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, low_battery, full_battery, door_alarm, guard_entered, fire_alarm" --outs="go_entrace, go_counter, go_back, go_warehouse, go_charging_point, go_safe_loc"


/home/cogomo/output/results/cgt_clusters_original/cluster_1/specification.txt IS REALIZABLE
DOT file generated
			SAT:	((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> ((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, fire_alarm" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, go_safe_loc, go_counter"


/home/cogomo/output/results/cgt_clusters_original/cluster_2/specification.txt IS REALIZABLE
DOT file generated
			SAT:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G( F(! (fire_alarm)))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "((G( F(! (fire_alarm)))) -> (((((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, fire_alarm" --outs="go_back, go_warehouse, go_entrace, take_med, give_med, go_charging_point, welcome_client, go_safe_loc, go_counter"


/home/cogomo/output/results/cgt_clusters_original/cluster_3/specification.txt IS REALIZABLE
DOT file generated

Clustering process finished. Results generated.
GOAL:	'night-time-patroling'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))


GOAL:	'get-meds-to-clients'
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))


GOAL:	'low-battery'
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))


GOAL:	'welcome-visitors'
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))


GOAL:	'shop-alarm'
  A:	TRUE
  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))


GOAL:	'fire-alarm'
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/complete/goal_list/night-time-patroling/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_entrace, take_med, go_charging_point, give_med, go_safe_loc, go_back, go_counter"


/home/cogomo/output/results/complete/goal_list/get-meds-to-clients/specification.txt IS REALIZABLE
DOT file generated
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, low_battery, get_med, fire_alarm, day_time, door_alarm, full_battery, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/complete/goal_list/low-battery/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, human_entered, night_time, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, welcome_client, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/complete/goal_list/welcome-visitors/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((night_time) -> (G((door_alarm & !  guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, guard_entered, warehouse, night_time, human_entered, get_med, fire_alarm, day_time, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/complete/goal_list/shop-alarm/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((fire_alarm) -> (go_safe_loc))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> ((G((fire_alarm) -> (go_safe_loc)) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="shop, warehouse, guard_entered, night_time, human_entered, get_med, day_time, fire_alarm, door_alarm, entrance" --outs="go_warehouse, go_back, go_entrace, go_safe_loc, go_charging_point, go_counter"


/home/cogomo/output/results/complete/goal_list/fire-alarm/specification.txt IS REALIZABLE
DOT file generated
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
			SAT:	(G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
			VALID:	((G((fire_alarm) -> (go_safe_loc))) -> ((G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
			SAT:	(G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((fire_alarm) -> (go_safe_loc)))) -> (G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))))
			SAT:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
			SAT:	(G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))
			VALID:	(((G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))) -> (G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))))
The conjunction satisfiable.
GOAL:	'fire-alarm^^get-meds-to-clients^^low-battery^^night-time-patroling^^shop-alarm^^welcome-visitors'
  A:	TRUE
  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))
	/\ 
  A:	TRUE
  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))
	/\ 
  A:	TRUE
  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))
	/\ 
  A:	TRUE
  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))
	/\ 
  A:	TRUE
  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))
	/\ 
  A:	TRUE
  G:	G((fire_alarm) -> (go_safe_loc))

	CONJUNCTION
		GOAL:	'night-time-patroling'
		  A:	TRUE
		  G:	G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse))))))

		GOAL:	'get-meds-to-clients'
		  A:	TRUE
		  G:	G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med))))))

		GOAL:	'low-battery'
		  A:	TRUE
		  G:	(G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery)))

		GOAL:	'welcome-visitors'
		  A:	TRUE
		  G:	G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client)))

		GOAL:	'shop-alarm'
		  A:	TRUE
		  G:	G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered)))))))

		GOAL:	'fire-alarm'
		  A:	TRUE
		  G:	G((fire_alarm) -> (go_safe_loc))


			SAT:	(G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (!go_warehouse U go_back) & (!go_entrace U go_warehouse) & (!go_back U (go_back & X(!go_back U(go_warehouse)))) & (!go_warehouse U (go_warehouse & X(!go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & ! full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & ! guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc)))
			SAT:	G( F(!(fire_alarm)))
			SAT:	G(((go_entrace & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_counter & !(go_entrace) & !(go_back) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_back & !(go_entrace) & !(go_counter) & !(go_warehouse) & !(go_charging_point) & !(go_safe_loc)) | (go_warehouse & !(go_entrace) & !(go_counter) & !(go_back) & !(go_charging_point) & !(go_safe_loc)) | (go_charging_point & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_safe_loc)) | (go_safe_loc & !(go_entrace) & !(go_counter) & !(go_back) & !(go_warehouse) & !(go_charging_point))))
			SAT:	G(((shop & !(warehouse)) | (warehouse & !(shop))))
			SAT:	G(((day_time & !(night_time)) | (night_time & !(day_time))))
			SAT:	G(entrance -> shop)
			SAT:	G(human_entered -> shop)
			SAT:	G(get_med -> entrance)
			SAT:	G(fire_alarm -> warehouse)
			SAT:	G(door_alarm -> shop)
			SAT:	G(guard_entered -> shop)
			SAT:	(G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))
Formatting TRUE as true for strix


RUNNING COMMAND:

/home/cogomo/bin/ubuntu_19_10/strix -k --dot -f "(((G( F(! (fire_alarm))) & G(((shop & ! (warehouse)) | (warehouse & ! (shop)))) & G(((day_time & ! (night_time)) | (night_time & ! (day_time)))) & G(entrance -> shop) & G(human_entered -> shop) & G(get_med -> entrance) & G(fire_alarm -> warehouse) & G(door_alarm -> shop) & G(guard_entered -> shop))) -> (((G((night_time) -> G(F(go_entrace & F(go_counter & F(go_back & F(go_warehouse)))))) & G(((shop & day_time)) -> G((get_med) -> F(((F(go_back & F(go_warehouse & F(go_entrace))) & (! go_warehouse U go_back) & (! go_entrace U go_warehouse) & (! go_back U (go_back & X(! go_back U(go_warehouse)))) & (! go_warehouse U (go_warehouse & X(! go_warehouse U(go_entrace))))) & G((go_warehouse) -> (take_med)) & G((go_entrace) -> (give_med)))))) & (G((low_battery & !  full_battery & F full_battery) -> ((F(go_charging_point | full_battery)) U full_battery))) & G(((day_time & entrance)) -> G((human_entered) -> F(welcome_client))) & G((night_time) -> (G((door_alarm & !  guard_entered) -> (((F(go_entrace | guard_entered)) U guard_entered) | G((F(go_entrace | guard_entered))))))) & G((fire_alarm) -> (go_safe_loc))) & G(((go_entrace & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_counter & ! (go_entrace) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_back & ! (go_entrace) & ! (go_counter) & ! (go_warehouse) & ! (go_charging_point) & ! (go_safe_loc)) | (go_warehouse & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_charging_point) & ! (go_safe_loc)) | (go_charging_point & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_safe_loc)) | (go_safe_loc & ! (go_entrace) & ! (go_counter) & ! (go_back) & ! (go_warehouse) & ! (go_charging_point)))))))" --ins="night_time, get_med, shop, day_time, low_battery, full_battery, human_entered, entrance, door_alarm, guard_entered, fire_alarm, warehouse" --outs="go_entrace, go_counter, go_back, go_warehouse, take_med, give_med, go_charging_point, welcome_client, go_safe_loc"


